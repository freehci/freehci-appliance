# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ConfiguredEdgeServicesAndAuthMethodList(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "edgeServiceList",
            "tlsPortSharingEnabled",
            "fipsEnabled",
            "wrpAuthConsumeTypes",
            "uagName",
            "authMethodList",
        }
        
        class properties:
            
            
            class edgeServiceList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConfiguredEdgeService']:
                        return ConfiguredEdgeService
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ConfiguredEdgeService'], typing.List['ConfiguredEdgeService']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edgeServiceList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ConfiguredEdgeService':
                    return super().__getitem__(i)
            
            
            class authMethodList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConfiguredAuthMethod']:
                        return ConfiguredAuthMethod
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ConfiguredAuthMethod'], typing.List['ConfiguredAuthMethod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authMethodList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ConfiguredAuthMethod':
                    return super().__getitem__(i)
            
            
            class wrpAuthConsumeTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def SAML(cls):
                            return cls("SAML")
                        
                        @schemas.classproperty
                        def CERTIFICATE(cls):
                            return cls("CERTIFICATE")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wrpAuthConsumeTypes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            tlsPortSharingEnabled = schemas.BoolSchema
            uagName = schemas.StrSchema
            fipsEnabled = schemas.BoolSchema
            adminCertRolledBack = schemas.BoolSchema
        
            @staticmethod
            def user() -> typing.Type['AdminUser']:
                return AdminUser
            
            
            class privileges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def FULL(cls):
                            return cls("FULL")
                        
                        @schemas.classproperty
                        def CONFIG_RO(cls):
                            return cls("CONFIG_RO")
                        
                        @schemas.classproperty
                        def LOGLEVEL_RW(cls):
                            return cls("LOGLEVEL_RW")
                        
                        @schemas.classproperty
                        def LOGS_DOWNLOAD(cls):
                            return cls("LOGS_DOWNLOAD")
                        
                        @schemas.classproperty
                        def CONFIG_DOWNLOAD(cls):
                            return cls("CONFIG_DOWNLOAD")
                        
                        @schemas.classproperty
                        def PASSWORD_CHANGE(cls):
                            return cls("PASSWORD_CHANGE")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'privileges':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "edgeServiceList": edgeServiceList,
                "authMethodList": authMethodList,
                "wrpAuthConsumeTypes": wrpAuthConsumeTypes,
                "tlsPortSharingEnabled": tlsPortSharingEnabled,
                "uagName": uagName,
                "fipsEnabled": fipsEnabled,
                "adminCertRolledBack": adminCertRolledBack,
                "user": user,
                "privileges": privileges,
            }
    
    edgeServiceList: MetaOapg.properties.edgeServiceList
    tlsPortSharingEnabled: MetaOapg.properties.tlsPortSharingEnabled
    fipsEnabled: MetaOapg.properties.fipsEnabled
    wrpAuthConsumeTypes: MetaOapg.properties.wrpAuthConsumeTypes
    uagName: MetaOapg.properties.uagName
    authMethodList: MetaOapg.properties.authMethodList
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edgeServiceList"]) -> MetaOapg.properties.edgeServiceList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authMethodList"]) -> MetaOapg.properties.authMethodList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wrpAuthConsumeTypes"]) -> MetaOapg.properties.wrpAuthConsumeTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsPortSharingEnabled"]) -> MetaOapg.properties.tlsPortSharingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uagName"]) -> MetaOapg.properties.uagName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fipsEnabled"]) -> MetaOapg.properties.fipsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminCertRolledBack"]) -> MetaOapg.properties.adminCertRolledBack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'AdminUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privileges"]) -> MetaOapg.properties.privileges: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["edgeServiceList", "authMethodList", "wrpAuthConsumeTypes", "tlsPortSharingEnabled", "uagName", "fipsEnabled", "adminCertRolledBack", "user", "privileges", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edgeServiceList"]) -> MetaOapg.properties.edgeServiceList: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authMethodList"]) -> MetaOapg.properties.authMethodList: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wrpAuthConsumeTypes"]) -> MetaOapg.properties.wrpAuthConsumeTypes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsPortSharingEnabled"]) -> MetaOapg.properties.tlsPortSharingEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uagName"]) -> MetaOapg.properties.uagName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fipsEnabled"]) -> MetaOapg.properties.fipsEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminCertRolledBack"]) -> typing.Union[MetaOapg.properties.adminCertRolledBack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['AdminUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privileges"]) -> typing.Union[MetaOapg.properties.privileges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["edgeServiceList", "authMethodList", "wrpAuthConsumeTypes", "tlsPortSharingEnabled", "uagName", "fipsEnabled", "adminCertRolledBack", "user", "privileges", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        edgeServiceList: typing.Union[MetaOapg.properties.edgeServiceList, list, tuple, ],
        tlsPortSharingEnabled: typing.Union[MetaOapg.properties.tlsPortSharingEnabled, bool, ],
        fipsEnabled: typing.Union[MetaOapg.properties.fipsEnabled, bool, ],
        wrpAuthConsumeTypes: typing.Union[MetaOapg.properties.wrpAuthConsumeTypes, list, tuple, ],
        uagName: typing.Union[MetaOapg.properties.uagName, str, ],
        authMethodList: typing.Union[MetaOapg.properties.authMethodList, list, tuple, ],
        adminCertRolledBack: typing.Union[MetaOapg.properties.adminCertRolledBack, bool, schemas.Unset] = schemas.unset,
        user: typing.Union['AdminUser', schemas.Unset] = schemas.unset,
        privileges: typing.Union[MetaOapg.properties.privileges, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConfiguredEdgeServicesAndAuthMethodList':
        return super().__new__(
            cls,
            *_args,
            edgeServiceList=edgeServiceList,
            tlsPortSharingEnabled=tlsPortSharingEnabled,
            fipsEnabled=fipsEnabled,
            wrpAuthConsumeTypes=wrpAuthConsumeTypes,
            uagName=uagName,
            authMethodList=authMethodList,
            adminCertRolledBack=adminCertRolledBack,
            user=user,
            privileges=privileges,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.admin_user import AdminUser
from openapi_client.model.configured_auth_method import ConfiguredAuthMethod
from openapi_client.model.configured_edge_service import ConfiguredEdgeService
