# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SnmpSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class version(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def V1_V2C(cls):
                    return cls("V1_V2C")
                
                @schemas.classproperty
                def V3(cls):
                    return cls("V3")
            usmUser = schemas.StrSchema
            engineID = schemas.StrSchema
            
            
            class securityLevel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NO_AUTH_NO_PRIV(cls):
                    return cls("NO_AUTH_NO_PRIV")
                
                @schemas.classproperty
                def AUTH_NO_PRIV(cls):
                    return cls("AUTH_NO_PRIV")
                
                @schemas.classproperty
                def AUTH_PRIV(cls):
                    return cls("AUTH_PRIV")
            authPassword = schemas.StrSchema
            
            
            class privacyAlgorithm(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AES(cls):
                    return cls("AES")
                
                @schemas.classproperty
                def DES(cls):
                    return cls("DES")
            privacyPassword = schemas.StrSchema
            authAlgorithm = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "usmUser": usmUser,
                "engineID": engineID,
                "securityLevel": securityLevel,
                "authPassword": authPassword,
                "privacyAlgorithm": privacyAlgorithm,
                "privacyPassword": privacyPassword,
                "authAlgorithm": authAlgorithm,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usmUser"]) -> MetaOapg.properties.usmUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engineID"]) -> MetaOapg.properties.engineID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityLevel"]) -> MetaOapg.properties.securityLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authPassword"]) -> MetaOapg.properties.authPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacyAlgorithm"]) -> MetaOapg.properties.privacyAlgorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacyPassword"]) -> MetaOapg.properties.privacyPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authAlgorithm"]) -> MetaOapg.properties.authAlgorithm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "usmUser", "engineID", "securityLevel", "authPassword", "privacyAlgorithm", "privacyPassword", "authAlgorithm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usmUser"]) -> typing.Union[MetaOapg.properties.usmUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engineID"]) -> typing.Union[MetaOapg.properties.engineID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityLevel"]) -> typing.Union[MetaOapg.properties.securityLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authPassword"]) -> typing.Union[MetaOapg.properties.authPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacyAlgorithm"]) -> typing.Union[MetaOapg.properties.privacyAlgorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacyPassword"]) -> typing.Union[MetaOapg.properties.privacyPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authAlgorithm"]) -> typing.Union[MetaOapg.properties.authAlgorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "usmUser", "engineID", "securityLevel", "authPassword", "privacyAlgorithm", "privacyPassword", "authAlgorithm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        usmUser: typing.Union[MetaOapg.properties.usmUser, str, schemas.Unset] = schemas.unset,
        engineID: typing.Union[MetaOapg.properties.engineID, str, schemas.Unset] = schemas.unset,
        securityLevel: typing.Union[MetaOapg.properties.securityLevel, str, schemas.Unset] = schemas.unset,
        authPassword: typing.Union[MetaOapg.properties.authPassword, str, schemas.Unset] = schemas.unset,
        privacyAlgorithm: typing.Union[MetaOapg.properties.privacyAlgorithm, str, schemas.Unset] = schemas.unset,
        privacyPassword: typing.Union[MetaOapg.properties.privacyPassword, str, schemas.Unset] = schemas.unset,
        authAlgorithm: typing.Union[MetaOapg.properties.authAlgorithm, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SnmpSettings':
        return super().__new__(
            cls,
            *_args,
            version=version,
            usmUser=usmUser,
            engineID=engineID,
            securityLevel=securityLevel,
            authPassword=authPassword,
            privacyAlgorithm=privacyAlgorithm,
            privacyPassword=privacyPassword,
            authAlgorithm=authAlgorithm,
            _configuration=_configuration,
            **kwargs,
        )
