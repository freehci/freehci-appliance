# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class IdPExternalMetadataSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            entityID = schemas.StrSchema
            metadata = schemas.StrSchema
            forceAuthN = schemas.BoolSchema
            allowUnencrypted = schemas.BoolSchema
            encryptionCertificateType = schemas.StrSchema
        
            @staticmethod
            def certificateChainAndKeyWrapper() -> typing.Type['CertificateChainAndKeyWrapper']:
                return CertificateChainAndKeyWrapper
            __annotations__ = {
                "entityID": entityID,
                "metadata": metadata,
                "forceAuthN": forceAuthN,
                "allowUnencrypted": allowUnencrypted,
                "encryptionCertificateType": encryptionCertificateType,
                "certificateChainAndKeyWrapper": certificateChainAndKeyWrapper,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityID"]) -> MetaOapg.properties.entityID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceAuthN"]) -> MetaOapg.properties.forceAuthN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowUnencrypted"]) -> MetaOapg.properties.allowUnencrypted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionCertificateType"]) -> MetaOapg.properties.encryptionCertificateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateChainAndKeyWrapper"]) -> 'CertificateChainAndKeyWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entityID", "metadata", "forceAuthN", "allowUnencrypted", "encryptionCertificateType", "certificateChainAndKeyWrapper", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityID"]) -> typing.Union[MetaOapg.properties.entityID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceAuthN"]) -> typing.Union[MetaOapg.properties.forceAuthN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowUnencrypted"]) -> typing.Union[MetaOapg.properties.allowUnencrypted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionCertificateType"]) -> typing.Union[MetaOapg.properties.encryptionCertificateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateChainAndKeyWrapper"]) -> typing.Union['CertificateChainAndKeyWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entityID", "metadata", "forceAuthN", "allowUnencrypted", "encryptionCertificateType", "certificateChainAndKeyWrapper", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        entityID: typing.Union[MetaOapg.properties.entityID, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, str, schemas.Unset] = schemas.unset,
        forceAuthN: typing.Union[MetaOapg.properties.forceAuthN, bool, schemas.Unset] = schemas.unset,
        allowUnencrypted: typing.Union[MetaOapg.properties.allowUnencrypted, bool, schemas.Unset] = schemas.unset,
        encryptionCertificateType: typing.Union[MetaOapg.properties.encryptionCertificateType, str, schemas.Unset] = schemas.unset,
        certificateChainAndKeyWrapper: typing.Union['CertificateChainAndKeyWrapper', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdPExternalMetadataSettings':
        return super().__new__(
            cls,
            *_args,
            entityID=entityID,
            metadata=metadata,
            forceAuthN=forceAuthN,
            allowUnencrypted=allowUnencrypted,
            encryptionCertificateType=encryptionCertificateType,
            certificateChainAndKeyWrapper=certificateChainAndKeyWrapper,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.certificate_chain_and_key_wrapper import CertificateChainAndKeyWrapper
