# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CertificateAuthMethodSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "enableOCSP",
            "validateUpn",
            "caCertificates",
            "sendOCSPNonce",
            "enableCertCRL",
            "enabled",
            "enableOCSPCRLFailover",
            "ocspURLSource",
            "enableConsentForm",
            "ocspURL",
            "enableCertRevocation",
            "certificatePolicies",
            "consentForm",
            "name",
            "userIdSource",
            "crlLocation",
            "requestTimeout",
        }
        
        class properties:
            name = schemas.StrSchema
            enabled = schemas.BoolSchema
            caCertificates = schemas.StrSchema
            
            
            class userIdSource(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "email": "EMAIL",
                        "subject": "SUBJECT",
                        "upn": "UPN",
                        "email.subject": "EMAIL_SUBJECT",
                        "email.upn": "EMAIL_UPN",
                        "subject.email": "SUBJECT_EMAIL",
                        "subject.upn": "SUBJECT_UPN",
                        "upn.email": "UPN_EMAIL",
                        "upn.subject": "UPN_SUBJECT",
                        "email.subject.upn": "EMAIL_SUBJECT_UPN",
                        "email.upn.subject": "EMAIL_UPN_SUBJECT",
                        "subject.email.upn": "SUBJECT_EMAIL_UPN",
                        "subject.upn.email": "SUBJECT_UPN_EMAIL",
                        "upn.email.subject": "UPN_EMAIL_SUBJECT",
                        "upn.subject.email": "UPN_SUBJECT_EMAIL",
                    }
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("email")
                
                @schemas.classproperty
                def SUBJECT(cls):
                    return cls("subject")
                
                @schemas.classproperty
                def UPN(cls):
                    return cls("upn")
                
                @schemas.classproperty
                def EMAIL_SUBJECT(cls):
                    return cls("email.subject")
                
                @schemas.classproperty
                def EMAIL_UPN(cls):
                    return cls("email.upn")
                
                @schemas.classproperty
                def SUBJECT_EMAIL(cls):
                    return cls("subject.email")
                
                @schemas.classproperty
                def SUBJECT_UPN(cls):
                    return cls("subject.upn")
                
                @schemas.classproperty
                def UPN_EMAIL(cls):
                    return cls("upn.email")
                
                @schemas.classproperty
                def UPN_SUBJECT(cls):
                    return cls("upn.subject")
                
                @schemas.classproperty
                def EMAIL_SUBJECT_UPN(cls):
                    return cls("email.subject.upn")
                
                @schemas.classproperty
                def EMAIL_UPN_SUBJECT(cls):
                    return cls("email.upn.subject")
                
                @schemas.classproperty
                def SUBJECT_EMAIL_UPN(cls):
                    return cls("subject.email.upn")
                
                @schemas.classproperty
                def SUBJECT_UPN_EMAIL(cls):
                    return cls("subject.upn.email")
                
                @schemas.classproperty
                def UPN_EMAIL_SUBJECT(cls):
                    return cls("upn.email.subject")
                
                @schemas.classproperty
                def UPN_SUBJECT_EMAIL(cls):
                    return cls("upn.subject.email")
            validateUpn = schemas.BoolSchema
            requestTimeout = schemas.StrSchema
            certificatePolicies = schemas.StrSchema
            enableCertRevocation = schemas.BoolSchema
            enableCertCRL = schemas.BoolSchema
            crlLocation = schemas.StrSchema
            enableOCSP = schemas.BoolSchema
            enableOCSPCRLFailover = schemas.BoolSchema
            sendOCSPNonce = schemas.BoolSchema
            ocspURL = schemas.StrSchema
            
            
            class ocspURLSource(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "config_only": "CONFIG_ONLY",
                        "cert_only_optional": "CERT_ONLY_OPTIONAL",
                        "cert_only_required": "CERT_ONLY_REQUIRED",
                        "cert_and_config": "CERT_AND_CONFIG",
                    }
                
                @schemas.classproperty
                def CONFIG_ONLY(cls):
                    return cls("config_only")
                
                @schemas.classproperty
                def CERT_ONLY_OPTIONAL(cls):
                    return cls("cert_only_optional")
                
                @schemas.classproperty
                def CERT_ONLY_REQUIRED(cls):
                    return cls("cert_only_required")
                
                @schemas.classproperty
                def CERT_AND_CONFIG(cls):
                    return cls("cert_and_config")
            enableConsentForm = schemas.BoolSchema
            consentForm = schemas.StrSchema
            className = schemas.StrSchema
            displayName = schemas.StrSchema
            jarFile = schemas.StrSchema
            authMethod = schemas.StrSchema
            versionNum = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "enabled": enabled,
                "caCertificates": caCertificates,
                "userIdSource": userIdSource,
                "validateUpn": validateUpn,
                "requestTimeout": requestTimeout,
                "certificatePolicies": certificatePolicies,
                "enableCertRevocation": enableCertRevocation,
                "enableCertCRL": enableCertCRL,
                "crlLocation": crlLocation,
                "enableOCSP": enableOCSP,
                "enableOCSPCRLFailover": enableOCSPCRLFailover,
                "sendOCSPNonce": sendOCSPNonce,
                "ocspURL": ocspURL,
                "ocspURLSource": ocspURLSource,
                "enableConsentForm": enableConsentForm,
                "consentForm": consentForm,
                "className": className,
                "displayName": displayName,
                "jarFile": jarFile,
                "authMethod": authMethod,
                "versionNum": versionNum,
            }
    
    enableOCSP: MetaOapg.properties.enableOCSP
    validateUpn: MetaOapg.properties.validateUpn
    caCertificates: MetaOapg.properties.caCertificates
    sendOCSPNonce: MetaOapg.properties.sendOCSPNonce
    enableCertCRL: MetaOapg.properties.enableCertCRL
    enabled: MetaOapg.properties.enabled
    enableOCSPCRLFailover: MetaOapg.properties.enableOCSPCRLFailover
    ocspURLSource: MetaOapg.properties.ocspURLSource
    enableConsentForm: MetaOapg.properties.enableConsentForm
    ocspURL: MetaOapg.properties.ocspURL
    enableCertRevocation: MetaOapg.properties.enableCertRevocation
    certificatePolicies: MetaOapg.properties.certificatePolicies
    consentForm: MetaOapg.properties.consentForm
    name: MetaOapg.properties.name
    userIdSource: MetaOapg.properties.userIdSource
    crlLocation: MetaOapg.properties.crlLocation
    requestTimeout: MetaOapg.properties.requestTimeout
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caCertificates"]) -> MetaOapg.properties.caCertificates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userIdSource"]) -> MetaOapg.properties.userIdSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validateUpn"]) -> MetaOapg.properties.validateUpn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestTimeout"]) -> MetaOapg.properties.requestTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificatePolicies"]) -> MetaOapg.properties.certificatePolicies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableCertRevocation"]) -> MetaOapg.properties.enableCertRevocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableCertCRL"]) -> MetaOapg.properties.enableCertCRL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crlLocation"]) -> MetaOapg.properties.crlLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableOCSP"]) -> MetaOapg.properties.enableOCSP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableOCSPCRLFailover"]) -> MetaOapg.properties.enableOCSPCRLFailover: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendOCSPNonce"]) -> MetaOapg.properties.sendOCSPNonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ocspURL"]) -> MetaOapg.properties.ocspURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ocspURLSource"]) -> MetaOapg.properties.ocspURLSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableConsentForm"]) -> MetaOapg.properties.enableConsentForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consentForm"]) -> MetaOapg.properties.consentForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["className"]) -> MetaOapg.properties.className: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jarFile"]) -> MetaOapg.properties.jarFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authMethod"]) -> MetaOapg.properties.authMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionNum"]) -> MetaOapg.properties.versionNum: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "enabled", "caCertificates", "userIdSource", "validateUpn", "requestTimeout", "certificatePolicies", "enableCertRevocation", "enableCertCRL", "crlLocation", "enableOCSP", "enableOCSPCRLFailover", "sendOCSPNonce", "ocspURL", "ocspURLSource", "enableConsentForm", "consentForm", "className", "displayName", "jarFile", "authMethod", "versionNum", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caCertificates"]) -> MetaOapg.properties.caCertificates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userIdSource"]) -> MetaOapg.properties.userIdSource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validateUpn"]) -> MetaOapg.properties.validateUpn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestTimeout"]) -> MetaOapg.properties.requestTimeout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificatePolicies"]) -> MetaOapg.properties.certificatePolicies: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableCertRevocation"]) -> MetaOapg.properties.enableCertRevocation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableCertCRL"]) -> MetaOapg.properties.enableCertCRL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crlLocation"]) -> MetaOapg.properties.crlLocation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableOCSP"]) -> MetaOapg.properties.enableOCSP: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableOCSPCRLFailover"]) -> MetaOapg.properties.enableOCSPCRLFailover: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendOCSPNonce"]) -> MetaOapg.properties.sendOCSPNonce: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ocspURL"]) -> MetaOapg.properties.ocspURL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ocspURLSource"]) -> MetaOapg.properties.ocspURLSource: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableConsentForm"]) -> MetaOapg.properties.enableConsentForm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consentForm"]) -> MetaOapg.properties.consentForm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["className"]) -> typing.Union[MetaOapg.properties.className, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jarFile"]) -> typing.Union[MetaOapg.properties.jarFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authMethod"]) -> typing.Union[MetaOapg.properties.authMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionNum"]) -> typing.Union[MetaOapg.properties.versionNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "enabled", "caCertificates", "userIdSource", "validateUpn", "requestTimeout", "certificatePolicies", "enableCertRevocation", "enableCertCRL", "crlLocation", "enableOCSP", "enableOCSPCRLFailover", "sendOCSPNonce", "ocspURL", "ocspURLSource", "enableConsentForm", "consentForm", "className", "displayName", "jarFile", "authMethod", "versionNum", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enableOCSP: typing.Union[MetaOapg.properties.enableOCSP, bool, ],
        validateUpn: typing.Union[MetaOapg.properties.validateUpn, bool, ],
        caCertificates: typing.Union[MetaOapg.properties.caCertificates, str, ],
        sendOCSPNonce: typing.Union[MetaOapg.properties.sendOCSPNonce, bool, ],
        enableCertCRL: typing.Union[MetaOapg.properties.enableCertCRL, bool, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        enableOCSPCRLFailover: typing.Union[MetaOapg.properties.enableOCSPCRLFailover, bool, ],
        ocspURLSource: typing.Union[MetaOapg.properties.ocspURLSource, str, ],
        enableConsentForm: typing.Union[MetaOapg.properties.enableConsentForm, bool, ],
        ocspURL: typing.Union[MetaOapg.properties.ocspURL, str, ],
        enableCertRevocation: typing.Union[MetaOapg.properties.enableCertRevocation, bool, ],
        certificatePolicies: typing.Union[MetaOapg.properties.certificatePolicies, str, ],
        consentForm: typing.Union[MetaOapg.properties.consentForm, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        userIdSource: typing.Union[MetaOapg.properties.userIdSource, str, ],
        crlLocation: typing.Union[MetaOapg.properties.crlLocation, str, ],
        requestTimeout: typing.Union[MetaOapg.properties.requestTimeout, str, ],
        className: typing.Union[MetaOapg.properties.className, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        jarFile: typing.Union[MetaOapg.properties.jarFile, str, schemas.Unset] = schemas.unset,
        authMethod: typing.Union[MetaOapg.properties.authMethod, str, schemas.Unset] = schemas.unset,
        versionNum: typing.Union[MetaOapg.properties.versionNum, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CertificateAuthMethodSettings':
        return super().__new__(
            cls,
            *_args,
            enableOCSP=enableOCSP,
            validateUpn=validateUpn,
            caCertificates=caCertificates,
            sendOCSPNonce=sendOCSPNonce,
            enableCertCRL=enableCertCRL,
            enabled=enabled,
            enableOCSPCRLFailover=enableOCSPCRLFailover,
            ocspURLSource=ocspURLSource,
            enableConsentForm=enableConsentForm,
            ocspURL=ocspURL,
            enableCertRevocation=enableCertRevocation,
            certificatePolicies=certificatePolicies,
            consentForm=consentForm,
            name=name,
            userIdSource=userIdSource,
            crlLocation=crlLocation,
            requestTimeout=requestTimeout,
            className=className,
            displayName=displayName,
            jarFile=jarFile,
            authMethod=authMethod,
            versionNum=versionNum,
            _configuration=_configuration,
            **kwargs,
        )
