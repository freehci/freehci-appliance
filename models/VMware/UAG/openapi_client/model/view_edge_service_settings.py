# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ViewEdgeServiceSettings(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "pcoipEnabled",
                    "tunnelEnabled",
                    "blastEnabled",
                }
                
                class properties:
                    pcoipEnabled = schemas.BoolSchema
                    pcoipExternalUrl = schemas.StrSchema
                    blastEnabled = schemas.BoolSchema
                    blastExternalUrl = schemas.StrSchema
                    blastReverseConnectionEnabled = schemas.BoolSchema
                    blastReverseExternalUrlOutside = schemas.StrSchema
                    blastReverseExternalUrlInside = schemas.StrSchema
                    proxyBlastPemCert = schemas.StrSchema
                    blastAllowedHostHeaderValues = schemas.StrSchema
                    proxyBlastSHA1Thumbprint = schemas.StrSchema
                    proxyBlastSHA256Thumbprint = schemas.StrSchema
                    tunnelEnabled = schemas.BoolSchema
                    tunnelExternalUrl = schemas.StrSchema
                    proxyTunnelPemCert = schemas.StrSchema
                    
                    
                    class xmlAPISigningCertificateFlag(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "PEM": "PEM",
                                "PFX": "PFX",
                                "NONE": "NONE",
                            }
                        
                        @schemas.classproperty
                        def PEM(cls):
                            return cls("PEM")
                        
                        @schemas.classproperty
                        def PFX(cls):
                            return cls("PFX")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("NONE")
                
                    @staticmethod
                    def xmlSigningPemCertSettings() -> typing.Type['CertificateChainAndKeyWrapper']:
                        return CertificateChainAndKeyWrapper
                    
                    
                    class xmlSigningSwitch(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "ON": "ON",
                                "OFF": "OFF",
                                "AUTO": "AUTO",
                            }
                        
                        @schemas.classproperty
                        def ON(cls):
                            return cls("ON")
                        
                        @schemas.classproperty
                        def OFF(cls):
                            return cls("OFF")
                        
                        @schemas.classproperty
                        def AUTO(cls):
                            return cls("AUTO")
                    xmlSigningEnabled = schemas.BoolSchema
                    proxyTunnelSHA1Thumbprint = schemas.StrSchema
                    proxyTunnelSHA256Thumbprint = schemas.StrSchema
                    proxyPattern = schemas.StrSchema
                    smartCardHintPrompt = schemas.BoolSchema
                    matchWindowsUserName = schemas.BoolSchema
                    gatewayLocation = schemas.StrSchema
                    windowsSSOEnabled = schemas.BoolSchema
                    logoutOnCertRemoval = schemas.BoolSchema
                    udpTunnelServerEnabled = schemas.BoolSchema
                    queryBrokerInterval = schemas.Int32Schema
                    disableHtmlAccess = schemas.BoolSchema
                    complianceCheckOnAuthentication = schemas.BoolSchema
                    
                    
                    class proxyDestinationIPSupport(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "IPV4": "IPV4",
                                "IPV6": "IPV6",
                                "IPV4_IPV6": "IPV4_IPV6",
                            }
                        
                        @schemas.classproperty
                        def IPV4(cls):
                            return cls("IPV4")
                        
                        @schemas.classproperty
                        def IPV6(cls):
                            return cls("IPV6")
                        
                        @schemas.classproperty
                        def IPV4_IPV6(cls):
                            return cls("IPV4_IPV6")
                    
                    
                    class clientEncryptionMode(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "DISABLED": "DISABLED",
                                "ALLOWED": "ALLOWED",
                                "REQUIRED": "REQUIRED",
                            }
                        
                        @schemas.classproperty
                        def DISABLED(cls):
                            return cls("DISABLED")
                        
                        @schemas.classproperty
                        def ALLOWED(cls):
                            return cls("ALLOWED")
                        
                        @schemas.classproperty
                        def REQUIRED(cls):
                            return cls("REQUIRED")
                    radiusClassAttributeList = schemas.StrSchema
                    foreverAppsEnabled = schemas.BoolSchema
                    pcoipDisableLegacyCertificate = schemas.BoolSchema
                    
                    
                    class securityHeaders(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            additional_properties = schemas.StrSchema
                        
                        def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                        ) -> 'securityHeaders':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    jwtSettings = schemas.StrSchema
                    jwtIssuerSettings = schemas.StrSchema
                    
                    
                    class jwtAudiences(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'jwtAudiences':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    disclaimerText = schemas.StrSchema
                    idpEntityID = schemas.StrSchema
                    allowedAudiences = schemas.StrSchema
                    radiusUsernameLabel = schemas.StrSchema
                    radiusPasscodeLabel = schemas.StrSchema
                    samlUnauthUsernameAttribute = schemas.StrSchema
                    defaultUnauthUsername = schemas.StrSchema
                    proxyDestinationPreLoginMessageEnabled = schemas.BoolSchema
                    rewriteOriginHeader = schemas.BoolSchema
                    enableClientCertEkuCheck = schemas.BoolSchema
                    __annotations__ = {
                        "pcoipEnabled": pcoipEnabled,
                        "pcoipExternalUrl": pcoipExternalUrl,
                        "blastEnabled": blastEnabled,
                        "blastExternalUrl": blastExternalUrl,
                        "blastReverseConnectionEnabled": blastReverseConnectionEnabled,
                        "blastReverseExternalUrlOutside": blastReverseExternalUrlOutside,
                        "blastReverseExternalUrlInside": blastReverseExternalUrlInside,
                        "proxyBlastPemCert": proxyBlastPemCert,
                        "blastAllowedHostHeaderValues": blastAllowedHostHeaderValues,
                        "proxyBlastSHA1Thumbprint": proxyBlastSHA1Thumbprint,
                        "proxyBlastSHA256Thumbprint": proxyBlastSHA256Thumbprint,
                        "tunnelEnabled": tunnelEnabled,
                        "tunnelExternalUrl": tunnelExternalUrl,
                        "proxyTunnelPemCert": proxyTunnelPemCert,
                        "xmlAPISigningCertificateFlag": xmlAPISigningCertificateFlag,
                        "xmlSigningPemCertSettings": xmlSigningPemCertSettings,
                        "xmlSigningSwitch": xmlSigningSwitch,
                        "xmlSigningEnabled": xmlSigningEnabled,
                        "proxyTunnelSHA1Thumbprint": proxyTunnelSHA1Thumbprint,
                        "proxyTunnelSHA256Thumbprint": proxyTunnelSHA256Thumbprint,
                        "proxyPattern": proxyPattern,
                        "smartCardHintPrompt": smartCardHintPrompt,
                        "matchWindowsUserName": matchWindowsUserName,
                        "gatewayLocation": gatewayLocation,
                        "windowsSSOEnabled": windowsSSOEnabled,
                        "logoutOnCertRemoval": logoutOnCertRemoval,
                        "udpTunnelServerEnabled": udpTunnelServerEnabled,
                        "queryBrokerInterval": queryBrokerInterval,
                        "disableHtmlAccess": disableHtmlAccess,
                        "complianceCheckOnAuthentication": complianceCheckOnAuthentication,
                        "proxyDestinationIPSupport": proxyDestinationIPSupport,
                        "clientEncryptionMode": clientEncryptionMode,
                        "radiusClassAttributeList": radiusClassAttributeList,
                        "foreverAppsEnabled": foreverAppsEnabled,
                        "pcoipDisableLegacyCertificate": pcoipDisableLegacyCertificate,
                        "securityHeaders": securityHeaders,
                        "jwtSettings": jwtSettings,
                        "jwtIssuerSettings": jwtIssuerSettings,
                        "jwtAudiences": jwtAudiences,
                        "disclaimerText": disclaimerText,
                        "idpEntityID": idpEntityID,
                        "allowedAudiences": allowedAudiences,
                        "radiusUsernameLabel": radiusUsernameLabel,
                        "radiusPasscodeLabel": radiusPasscodeLabel,
                        "samlUnauthUsernameAttribute": samlUnauthUsernameAttribute,
                        "defaultUnauthUsername": defaultUnauthUsername,
                        "proxyDestinationPreLoginMessageEnabled": proxyDestinationPreLoginMessageEnabled,
                        "rewriteOriginHeader": rewriteOriginHeader,
                        "enableClientCertEkuCheck": enableClientCertEkuCheck,
                    }
            
            pcoipEnabled: MetaOapg.properties.pcoipEnabled
            tunnelEnabled: MetaOapg.properties.tunnelEnabled
            blastEnabled: MetaOapg.properties.blastEnabled
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pcoipEnabled"]) -> MetaOapg.properties.pcoipEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pcoipExternalUrl"]) -> MetaOapg.properties.pcoipExternalUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastEnabled"]) -> MetaOapg.properties.blastEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastExternalUrl"]) -> MetaOapg.properties.blastExternalUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastReverseConnectionEnabled"]) -> MetaOapg.properties.blastReverseConnectionEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastReverseExternalUrlOutside"]) -> MetaOapg.properties.blastReverseExternalUrlOutside: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastReverseExternalUrlInside"]) -> MetaOapg.properties.blastReverseExternalUrlInside: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyBlastPemCert"]) -> MetaOapg.properties.proxyBlastPemCert: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["blastAllowedHostHeaderValues"]) -> MetaOapg.properties.blastAllowedHostHeaderValues: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyBlastSHA1Thumbprint"]) -> MetaOapg.properties.proxyBlastSHA1Thumbprint: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyBlastSHA256Thumbprint"]) -> MetaOapg.properties.proxyBlastSHA256Thumbprint: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tunnelEnabled"]) -> MetaOapg.properties.tunnelEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tunnelExternalUrl"]) -> MetaOapg.properties.tunnelExternalUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyTunnelPemCert"]) -> MetaOapg.properties.proxyTunnelPemCert: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["xmlAPISigningCertificateFlag"]) -> MetaOapg.properties.xmlAPISigningCertificateFlag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["xmlSigningPemCertSettings"]) -> 'CertificateChainAndKeyWrapper': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["xmlSigningSwitch"]) -> MetaOapg.properties.xmlSigningSwitch: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["xmlSigningEnabled"]) -> MetaOapg.properties.xmlSigningEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyTunnelSHA1Thumbprint"]) -> MetaOapg.properties.proxyTunnelSHA1Thumbprint: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyTunnelSHA256Thumbprint"]) -> MetaOapg.properties.proxyTunnelSHA256Thumbprint: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyPattern"]) -> MetaOapg.properties.proxyPattern: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["smartCardHintPrompt"]) -> MetaOapg.properties.smartCardHintPrompt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["matchWindowsUserName"]) -> MetaOapg.properties.matchWindowsUserName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["gatewayLocation"]) -> MetaOapg.properties.gatewayLocation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["windowsSSOEnabled"]) -> MetaOapg.properties.windowsSSOEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["logoutOnCertRemoval"]) -> MetaOapg.properties.logoutOnCertRemoval: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["udpTunnelServerEnabled"]) -> MetaOapg.properties.udpTunnelServerEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["queryBrokerInterval"]) -> MetaOapg.properties.queryBrokerInterval: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["disableHtmlAccess"]) -> MetaOapg.properties.disableHtmlAccess: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["complianceCheckOnAuthentication"]) -> MetaOapg.properties.complianceCheckOnAuthentication: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyDestinationIPSupport"]) -> MetaOapg.properties.proxyDestinationIPSupport: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clientEncryptionMode"]) -> MetaOapg.properties.clientEncryptionMode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["radiusClassAttributeList"]) -> MetaOapg.properties.radiusClassAttributeList: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["foreverAppsEnabled"]) -> MetaOapg.properties.foreverAppsEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pcoipDisableLegacyCertificate"]) -> MetaOapg.properties.pcoipDisableLegacyCertificate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["securityHeaders"]) -> MetaOapg.properties.securityHeaders: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jwtSettings"]) -> MetaOapg.properties.jwtSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jwtIssuerSettings"]) -> MetaOapg.properties.jwtIssuerSettings: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jwtAudiences"]) -> MetaOapg.properties.jwtAudiences: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["disclaimerText"]) -> MetaOapg.properties.disclaimerText: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["idpEntityID"]) -> MetaOapg.properties.idpEntityID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["allowedAudiences"]) -> MetaOapg.properties.allowedAudiences: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["radiusUsernameLabel"]) -> MetaOapg.properties.radiusUsernameLabel: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["radiusPasscodeLabel"]) -> MetaOapg.properties.radiusPasscodeLabel: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["samlUnauthUsernameAttribute"]) -> MetaOapg.properties.samlUnauthUsernameAttribute: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["defaultUnauthUsername"]) -> MetaOapg.properties.defaultUnauthUsername: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["proxyDestinationPreLoginMessageEnabled"]) -> MetaOapg.properties.proxyDestinationPreLoginMessageEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rewriteOriginHeader"]) -> MetaOapg.properties.rewriteOriginHeader: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["enableClientCertEkuCheck"]) -> MetaOapg.properties.enableClientCertEkuCheck: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["pcoipEnabled", "pcoipExternalUrl", "blastEnabled", "blastExternalUrl", "blastReverseConnectionEnabled", "blastReverseExternalUrlOutside", "blastReverseExternalUrlInside", "proxyBlastPemCert", "blastAllowedHostHeaderValues", "proxyBlastSHA1Thumbprint", "proxyBlastSHA256Thumbprint", "tunnelEnabled", "tunnelExternalUrl", "proxyTunnelPemCert", "xmlAPISigningCertificateFlag", "xmlSigningPemCertSettings", "xmlSigningSwitch", "xmlSigningEnabled", "proxyTunnelSHA1Thumbprint", "proxyTunnelSHA256Thumbprint", "proxyPattern", "smartCardHintPrompt", "matchWindowsUserName", "gatewayLocation", "windowsSSOEnabled", "logoutOnCertRemoval", "udpTunnelServerEnabled", "queryBrokerInterval", "disableHtmlAccess", "complianceCheckOnAuthentication", "proxyDestinationIPSupport", "clientEncryptionMode", "radiusClassAttributeList", "foreverAppsEnabled", "pcoipDisableLegacyCertificate", "securityHeaders", "jwtSettings", "jwtIssuerSettings", "jwtAudiences", "disclaimerText", "idpEntityID", "allowedAudiences", "radiusUsernameLabel", "radiusPasscodeLabel", "samlUnauthUsernameAttribute", "defaultUnauthUsername", "proxyDestinationPreLoginMessageEnabled", "rewriteOriginHeader", "enableClientCertEkuCheck", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pcoipEnabled"]) -> MetaOapg.properties.pcoipEnabled: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pcoipExternalUrl"]) -> typing.Union[MetaOapg.properties.pcoipExternalUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastEnabled"]) -> MetaOapg.properties.blastEnabled: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastExternalUrl"]) -> typing.Union[MetaOapg.properties.blastExternalUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastReverseConnectionEnabled"]) -> typing.Union[MetaOapg.properties.blastReverseConnectionEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastReverseExternalUrlOutside"]) -> typing.Union[MetaOapg.properties.blastReverseExternalUrlOutside, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastReverseExternalUrlInside"]) -> typing.Union[MetaOapg.properties.blastReverseExternalUrlInside, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyBlastPemCert"]) -> typing.Union[MetaOapg.properties.proxyBlastPemCert, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["blastAllowedHostHeaderValues"]) -> typing.Union[MetaOapg.properties.blastAllowedHostHeaderValues, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyBlastSHA1Thumbprint"]) -> typing.Union[MetaOapg.properties.proxyBlastSHA1Thumbprint, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyBlastSHA256Thumbprint"]) -> typing.Union[MetaOapg.properties.proxyBlastSHA256Thumbprint, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tunnelEnabled"]) -> MetaOapg.properties.tunnelEnabled: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tunnelExternalUrl"]) -> typing.Union[MetaOapg.properties.tunnelExternalUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyTunnelPemCert"]) -> typing.Union[MetaOapg.properties.proxyTunnelPemCert, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["xmlAPISigningCertificateFlag"]) -> typing.Union[MetaOapg.properties.xmlAPISigningCertificateFlag, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["xmlSigningPemCertSettings"]) -> typing.Union['CertificateChainAndKeyWrapper', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["xmlSigningSwitch"]) -> typing.Union[MetaOapg.properties.xmlSigningSwitch, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["xmlSigningEnabled"]) -> typing.Union[MetaOapg.properties.xmlSigningEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyTunnelSHA1Thumbprint"]) -> typing.Union[MetaOapg.properties.proxyTunnelSHA1Thumbprint, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyTunnelSHA256Thumbprint"]) -> typing.Union[MetaOapg.properties.proxyTunnelSHA256Thumbprint, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyPattern"]) -> typing.Union[MetaOapg.properties.proxyPattern, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["smartCardHintPrompt"]) -> typing.Union[MetaOapg.properties.smartCardHintPrompt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["matchWindowsUserName"]) -> typing.Union[MetaOapg.properties.matchWindowsUserName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["gatewayLocation"]) -> typing.Union[MetaOapg.properties.gatewayLocation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["windowsSSOEnabled"]) -> typing.Union[MetaOapg.properties.windowsSSOEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["logoutOnCertRemoval"]) -> typing.Union[MetaOapg.properties.logoutOnCertRemoval, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["udpTunnelServerEnabled"]) -> typing.Union[MetaOapg.properties.udpTunnelServerEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["queryBrokerInterval"]) -> typing.Union[MetaOapg.properties.queryBrokerInterval, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["disableHtmlAccess"]) -> typing.Union[MetaOapg.properties.disableHtmlAccess, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["complianceCheckOnAuthentication"]) -> typing.Union[MetaOapg.properties.complianceCheckOnAuthentication, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyDestinationIPSupport"]) -> typing.Union[MetaOapg.properties.proxyDestinationIPSupport, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clientEncryptionMode"]) -> typing.Union[MetaOapg.properties.clientEncryptionMode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["radiusClassAttributeList"]) -> typing.Union[MetaOapg.properties.radiusClassAttributeList, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["foreverAppsEnabled"]) -> typing.Union[MetaOapg.properties.foreverAppsEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pcoipDisableLegacyCertificate"]) -> typing.Union[MetaOapg.properties.pcoipDisableLegacyCertificate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["securityHeaders"]) -> typing.Union[MetaOapg.properties.securityHeaders, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jwtSettings"]) -> typing.Union[MetaOapg.properties.jwtSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jwtIssuerSettings"]) -> typing.Union[MetaOapg.properties.jwtIssuerSettings, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jwtAudiences"]) -> typing.Union[MetaOapg.properties.jwtAudiences, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["disclaimerText"]) -> typing.Union[MetaOapg.properties.disclaimerText, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["idpEntityID"]) -> typing.Union[MetaOapg.properties.idpEntityID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["allowedAudiences"]) -> typing.Union[MetaOapg.properties.allowedAudiences, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["radiusUsernameLabel"]) -> typing.Union[MetaOapg.properties.radiusUsernameLabel, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["radiusPasscodeLabel"]) -> typing.Union[MetaOapg.properties.radiusPasscodeLabel, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["samlUnauthUsernameAttribute"]) -> typing.Union[MetaOapg.properties.samlUnauthUsernameAttribute, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["defaultUnauthUsername"]) -> typing.Union[MetaOapg.properties.defaultUnauthUsername, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["proxyDestinationPreLoginMessageEnabled"]) -> typing.Union[MetaOapg.properties.proxyDestinationPreLoginMessageEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rewriteOriginHeader"]) -> typing.Union[MetaOapg.properties.rewriteOriginHeader, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["enableClientCertEkuCheck"]) -> typing.Union[MetaOapg.properties.enableClientCertEkuCheck, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pcoipEnabled", "pcoipExternalUrl", "blastEnabled", "blastExternalUrl", "blastReverseConnectionEnabled", "blastReverseExternalUrlOutside", "blastReverseExternalUrlInside", "proxyBlastPemCert", "blastAllowedHostHeaderValues", "proxyBlastSHA1Thumbprint", "proxyBlastSHA256Thumbprint", "tunnelEnabled", "tunnelExternalUrl", "proxyTunnelPemCert", "xmlAPISigningCertificateFlag", "xmlSigningPemCertSettings", "xmlSigningSwitch", "xmlSigningEnabled", "proxyTunnelSHA1Thumbprint", "proxyTunnelSHA256Thumbprint", "proxyPattern", "smartCardHintPrompt", "matchWindowsUserName", "gatewayLocation", "windowsSSOEnabled", "logoutOnCertRemoval", "udpTunnelServerEnabled", "queryBrokerInterval", "disableHtmlAccess", "complianceCheckOnAuthentication", "proxyDestinationIPSupport", "clientEncryptionMode", "radiusClassAttributeList", "foreverAppsEnabled", "pcoipDisableLegacyCertificate", "securityHeaders", "jwtSettings", "jwtIssuerSettings", "jwtAudiences", "disclaimerText", "idpEntityID", "allowedAudiences", "radiusUsernameLabel", "radiusPasscodeLabel", "samlUnauthUsernameAttribute", "defaultUnauthUsername", "proxyDestinationPreLoginMessageEnabled", "rewriteOriginHeader", "enableClientCertEkuCheck", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                pcoipEnabled: typing.Union[MetaOapg.properties.pcoipEnabled, bool, ],
                tunnelEnabled: typing.Union[MetaOapg.properties.tunnelEnabled, bool, ],
                blastEnabled: typing.Union[MetaOapg.properties.blastEnabled, bool, ],
                pcoipExternalUrl: typing.Union[MetaOapg.properties.pcoipExternalUrl, str, schemas.Unset] = schemas.unset,
                blastExternalUrl: typing.Union[MetaOapg.properties.blastExternalUrl, str, schemas.Unset] = schemas.unset,
                blastReverseConnectionEnabled: typing.Union[MetaOapg.properties.blastReverseConnectionEnabled, bool, schemas.Unset] = schemas.unset,
                blastReverseExternalUrlOutside: typing.Union[MetaOapg.properties.blastReverseExternalUrlOutside, str, schemas.Unset] = schemas.unset,
                blastReverseExternalUrlInside: typing.Union[MetaOapg.properties.blastReverseExternalUrlInside, str, schemas.Unset] = schemas.unset,
                proxyBlastPemCert: typing.Union[MetaOapg.properties.proxyBlastPemCert, str, schemas.Unset] = schemas.unset,
                blastAllowedHostHeaderValues: typing.Union[MetaOapg.properties.blastAllowedHostHeaderValues, str, schemas.Unset] = schemas.unset,
                proxyBlastSHA1Thumbprint: typing.Union[MetaOapg.properties.proxyBlastSHA1Thumbprint, str, schemas.Unset] = schemas.unset,
                proxyBlastSHA256Thumbprint: typing.Union[MetaOapg.properties.proxyBlastSHA256Thumbprint, str, schemas.Unset] = schemas.unset,
                tunnelExternalUrl: typing.Union[MetaOapg.properties.tunnelExternalUrl, str, schemas.Unset] = schemas.unset,
                proxyTunnelPemCert: typing.Union[MetaOapg.properties.proxyTunnelPemCert, str, schemas.Unset] = schemas.unset,
                xmlAPISigningCertificateFlag: typing.Union[MetaOapg.properties.xmlAPISigningCertificateFlag, str, schemas.Unset] = schemas.unset,
                xmlSigningPemCertSettings: typing.Union['CertificateChainAndKeyWrapper', schemas.Unset] = schemas.unset,
                xmlSigningSwitch: typing.Union[MetaOapg.properties.xmlSigningSwitch, str, schemas.Unset] = schemas.unset,
                xmlSigningEnabled: typing.Union[MetaOapg.properties.xmlSigningEnabled, bool, schemas.Unset] = schemas.unset,
                proxyTunnelSHA1Thumbprint: typing.Union[MetaOapg.properties.proxyTunnelSHA1Thumbprint, str, schemas.Unset] = schemas.unset,
                proxyTunnelSHA256Thumbprint: typing.Union[MetaOapg.properties.proxyTunnelSHA256Thumbprint, str, schemas.Unset] = schemas.unset,
                proxyPattern: typing.Union[MetaOapg.properties.proxyPattern, str, schemas.Unset] = schemas.unset,
                smartCardHintPrompt: typing.Union[MetaOapg.properties.smartCardHintPrompt, bool, schemas.Unset] = schemas.unset,
                matchWindowsUserName: typing.Union[MetaOapg.properties.matchWindowsUserName, bool, schemas.Unset] = schemas.unset,
                gatewayLocation: typing.Union[MetaOapg.properties.gatewayLocation, str, schemas.Unset] = schemas.unset,
                windowsSSOEnabled: typing.Union[MetaOapg.properties.windowsSSOEnabled, bool, schemas.Unset] = schemas.unset,
                logoutOnCertRemoval: typing.Union[MetaOapg.properties.logoutOnCertRemoval, bool, schemas.Unset] = schemas.unset,
                udpTunnelServerEnabled: typing.Union[MetaOapg.properties.udpTunnelServerEnabled, bool, schemas.Unset] = schemas.unset,
                queryBrokerInterval: typing.Union[MetaOapg.properties.queryBrokerInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                disableHtmlAccess: typing.Union[MetaOapg.properties.disableHtmlAccess, bool, schemas.Unset] = schemas.unset,
                complianceCheckOnAuthentication: typing.Union[MetaOapg.properties.complianceCheckOnAuthentication, bool, schemas.Unset] = schemas.unset,
                proxyDestinationIPSupport: typing.Union[MetaOapg.properties.proxyDestinationIPSupport, str, schemas.Unset] = schemas.unset,
                clientEncryptionMode: typing.Union[MetaOapg.properties.clientEncryptionMode, str, schemas.Unset] = schemas.unset,
                radiusClassAttributeList: typing.Union[MetaOapg.properties.radiusClassAttributeList, str, schemas.Unset] = schemas.unset,
                foreverAppsEnabled: typing.Union[MetaOapg.properties.foreverAppsEnabled, bool, schemas.Unset] = schemas.unset,
                pcoipDisableLegacyCertificate: typing.Union[MetaOapg.properties.pcoipDisableLegacyCertificate, bool, schemas.Unset] = schemas.unset,
                securityHeaders: typing.Union[MetaOapg.properties.securityHeaders, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                jwtSettings: typing.Union[MetaOapg.properties.jwtSettings, str, schemas.Unset] = schemas.unset,
                jwtIssuerSettings: typing.Union[MetaOapg.properties.jwtIssuerSettings, str, schemas.Unset] = schemas.unset,
                jwtAudiences: typing.Union[MetaOapg.properties.jwtAudiences, list, tuple, schemas.Unset] = schemas.unset,
                disclaimerText: typing.Union[MetaOapg.properties.disclaimerText, str, schemas.Unset] = schemas.unset,
                idpEntityID: typing.Union[MetaOapg.properties.idpEntityID, str, schemas.Unset] = schemas.unset,
                allowedAudiences: typing.Union[MetaOapg.properties.allowedAudiences, str, schemas.Unset] = schemas.unset,
                radiusUsernameLabel: typing.Union[MetaOapg.properties.radiusUsernameLabel, str, schemas.Unset] = schemas.unset,
                radiusPasscodeLabel: typing.Union[MetaOapg.properties.radiusPasscodeLabel, str, schemas.Unset] = schemas.unset,
                samlUnauthUsernameAttribute: typing.Union[MetaOapg.properties.samlUnauthUsernameAttribute, str, schemas.Unset] = schemas.unset,
                defaultUnauthUsername: typing.Union[MetaOapg.properties.defaultUnauthUsername, str, schemas.Unset] = schemas.unset,
                proxyDestinationPreLoginMessageEnabled: typing.Union[MetaOapg.properties.proxyDestinationPreLoginMessageEnabled, bool, schemas.Unset] = schemas.unset,
                rewriteOriginHeader: typing.Union[MetaOapg.properties.rewriteOriginHeader, bool, schemas.Unset] = schemas.unset,
                enableClientCertEkuCheck: typing.Union[MetaOapg.properties.enableClientCertEkuCheck, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    pcoipEnabled=pcoipEnabled,
                    tunnelEnabled=tunnelEnabled,
                    blastEnabled=blastEnabled,
                    pcoipExternalUrl=pcoipExternalUrl,
                    blastExternalUrl=blastExternalUrl,
                    blastReverseConnectionEnabled=blastReverseConnectionEnabled,
                    blastReverseExternalUrlOutside=blastReverseExternalUrlOutside,
                    blastReverseExternalUrlInside=blastReverseExternalUrlInside,
                    proxyBlastPemCert=proxyBlastPemCert,
                    blastAllowedHostHeaderValues=blastAllowedHostHeaderValues,
                    proxyBlastSHA1Thumbprint=proxyBlastSHA1Thumbprint,
                    proxyBlastSHA256Thumbprint=proxyBlastSHA256Thumbprint,
                    tunnelExternalUrl=tunnelExternalUrl,
                    proxyTunnelPemCert=proxyTunnelPemCert,
                    xmlAPISigningCertificateFlag=xmlAPISigningCertificateFlag,
                    xmlSigningPemCertSettings=xmlSigningPemCertSettings,
                    xmlSigningSwitch=xmlSigningSwitch,
                    xmlSigningEnabled=xmlSigningEnabled,
                    proxyTunnelSHA1Thumbprint=proxyTunnelSHA1Thumbprint,
                    proxyTunnelSHA256Thumbprint=proxyTunnelSHA256Thumbprint,
                    proxyPattern=proxyPattern,
                    smartCardHintPrompt=smartCardHintPrompt,
                    matchWindowsUserName=matchWindowsUserName,
                    gatewayLocation=gatewayLocation,
                    windowsSSOEnabled=windowsSSOEnabled,
                    logoutOnCertRemoval=logoutOnCertRemoval,
                    udpTunnelServerEnabled=udpTunnelServerEnabled,
                    queryBrokerInterval=queryBrokerInterval,
                    disableHtmlAccess=disableHtmlAccess,
                    complianceCheckOnAuthentication=complianceCheckOnAuthentication,
                    proxyDestinationIPSupport=proxyDestinationIPSupport,
                    clientEncryptionMode=clientEncryptionMode,
                    radiusClassAttributeList=radiusClassAttributeList,
                    foreverAppsEnabled=foreverAppsEnabled,
                    pcoipDisableLegacyCertificate=pcoipDisableLegacyCertificate,
                    securityHeaders=securityHeaders,
                    jwtSettings=jwtSettings,
                    jwtIssuerSettings=jwtIssuerSettings,
                    jwtAudiences=jwtAudiences,
                    disclaimerText=disclaimerText,
                    idpEntityID=idpEntityID,
                    allowedAudiences=allowedAudiences,
                    radiusUsernameLabel=radiusUsernameLabel,
                    radiusPasscodeLabel=radiusPasscodeLabel,
                    samlUnauthUsernameAttribute=samlUnauthUsernameAttribute,
                    defaultUnauthUsername=defaultUnauthUsername,
                    proxyDestinationPreLoginMessageEnabled=proxyDestinationPreLoginMessageEnabled,
                    rewriteOriginHeader=rewriteOriginHeader,
                    enableClientCertEkuCheck=enableClientCertEkuCheck,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                EdgeServiceSettings,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ViewEdgeServiceSettings':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.certificate_chain_and_key_wrapper import CertificateChainAndKeyWrapper
from openapi_client.model.edge_service_settings import EdgeServiceSettings
