# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DevicePolicySettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        @staticmethod
        def discriminator():
            return {
                'name': {
                    'OpswatDevicePolicySettings': OpswatDevicePolicySettings,
                    'WorkspaceOneIntelligenceRiskScoreSettings': WorkspaceOneIntelligenceRiskScoreSettings,
                }
            }
        
        class properties:
            name = schemas.StrSchema
            
            
            class hostedResourceMap(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['ResourceSettings']:
                        return ResourceSettings
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'ResourceSettings':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'ResourceSettings':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'ResourceSettings',
                ) -> 'hostedResourceMap':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            settingsId = schemas.StrSchema
            complianceCheckInterval = schemas.Int64Schema
            
            
            class complianceCheckTimeunit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NANOSECONDS": "NANOSECONDS",
                        "MICROSECONDS": "MICROSECONDS",
                        "MILLISECONDS": "MILLISECONDS",
                        "SECONDS": "SECONDS",
                        "MINUTES": "MINUTES",
                        "HOURS": "HOURS",
                        "DAYS": "DAYS",
                    }
                
                @schemas.classproperty
                def NANOSECONDS(cls):
                    return cls("NANOSECONDS")
                
                @schemas.classproperty
                def MICROSECONDS(cls):
                    return cls("MICROSECONDS")
                
                @schemas.classproperty
                def MILLISECONDS(cls):
                    return cls("MILLISECONDS")
                
                @schemas.classproperty
                def SECONDS(cls):
                    return cls("SECONDS")
                
                @schemas.classproperty
                def MINUTES(cls):
                    return cls("MINUTES")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("HOURS")
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("DAYS")
            complianceServerHealthCheckInterval = schemas.Int32Schema
            
            
            class allowedStatuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeviceStatus']:
                        return DeviceStatus
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeviceStatus'], typing.List['DeviceStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedStatuses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeviceStatus':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "hostedResourceMap": hostedResourceMap,
                "settingsId": settingsId,
                "complianceCheckInterval": complianceCheckInterval,
                "complianceCheckTimeunit": complianceCheckTimeunit,
                "complianceServerHealthCheckInterval": complianceServerHealthCheckInterval,
                "allowedStatuses": allowedStatuses,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostedResourceMap"]) -> MetaOapg.properties.hostedResourceMap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settingsId"]) -> MetaOapg.properties.settingsId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complianceCheckInterval"]) -> MetaOapg.properties.complianceCheckInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complianceCheckTimeunit"]) -> MetaOapg.properties.complianceCheckTimeunit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complianceServerHealthCheckInterval"]) -> MetaOapg.properties.complianceServerHealthCheckInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedStatuses"]) -> MetaOapg.properties.allowedStatuses: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "hostedResourceMap", "settingsId", "complianceCheckInterval", "complianceCheckTimeunit", "complianceServerHealthCheckInterval", "allowedStatuses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostedResourceMap"]) -> typing.Union[MetaOapg.properties.hostedResourceMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settingsId"]) -> typing.Union[MetaOapg.properties.settingsId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complianceCheckInterval"]) -> typing.Union[MetaOapg.properties.complianceCheckInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complianceCheckTimeunit"]) -> typing.Union[MetaOapg.properties.complianceCheckTimeunit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complianceServerHealthCheckInterval"]) -> typing.Union[MetaOapg.properties.complianceServerHealthCheckInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedStatuses"]) -> typing.Union[MetaOapg.properties.allowedStatuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "hostedResourceMap", "settingsId", "complianceCheckInterval", "complianceCheckTimeunit", "complianceServerHealthCheckInterval", "allowedStatuses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        hostedResourceMap: typing.Union[MetaOapg.properties.hostedResourceMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        settingsId: typing.Union[MetaOapg.properties.settingsId, str, schemas.Unset] = schemas.unset,
        complianceCheckInterval: typing.Union[MetaOapg.properties.complianceCheckInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        complianceCheckTimeunit: typing.Union[MetaOapg.properties.complianceCheckTimeunit, str, schemas.Unset] = schemas.unset,
        complianceServerHealthCheckInterval: typing.Union[MetaOapg.properties.complianceServerHealthCheckInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowedStatuses: typing.Union[MetaOapg.properties.allowedStatuses, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DevicePolicySettings':
        return super().__new__(
            cls,
            *_args,
            name=name,
            hostedResourceMap=hostedResourceMap,
            settingsId=settingsId,
            complianceCheckInterval=complianceCheckInterval,
            complianceCheckTimeunit=complianceCheckTimeunit,
            complianceServerHealthCheckInterval=complianceServerHealthCheckInterval,
            allowedStatuses=allowedStatuses,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.device_status import DeviceStatus
from openapi_client.model.opswat_device_policy_settings import OpswatDevicePolicySettings
from openapi_client.model.resource_settings import ResourceSettings
from openapi_client.model.workspace_one_intelligence_risk_score_settings import WorkspaceOneIntelligenceRiskScoreSettings
