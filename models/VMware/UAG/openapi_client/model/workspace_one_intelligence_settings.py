# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class WorkspaceOneIntelligenceSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[[\p{L}\p{N}\p{M}_.-]+( [\p{L}\p{N}\p{M}_.-]+)]{1,50}$',  # noqa: E501
                    }]
            encodedCredentialsFileContent = schemas.StrSchema
            
            
            class urlThumbprints(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\s*\*$||(((sha1|md5|sha256|sha384|sha512)=)?([0-9a-fA-F][0-9a-fA-F][: ]?)*[0-9a-fA-F][0-9a-fA-F], *)*(((sha1|md5|sha256|sha384|sha512)=)?([0-9a-fA-F][0-9a-fA-F][: ]?)*[0-9a-fA-F][0-9a-fA-F])',  # noqa: E501
                    }]
            
            
            class trustedCertificates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PublicKeyOrCert']:
                        return PublicKeyOrCert
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PublicKeyOrCert'], typing.List['PublicKeyOrCert']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trustedCertificates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PublicKeyOrCert':
                    return super().__getitem__(i)
        
            @staticmethod
            def ws1IntelligenceCredentials() -> typing.Type['WS1IntelligenceCredentials']:
                return WS1IntelligenceCredentials
            __annotations__ = {
                "name": name,
                "encodedCredentialsFileContent": encodedCredentialsFileContent,
                "urlThumbprints": urlThumbprints,
                "trustedCertificates": trustedCertificates,
                "ws1IntelligenceCredentials": ws1IntelligenceCredentials,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encodedCredentialsFileContent"]) -> MetaOapg.properties.encodedCredentialsFileContent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urlThumbprints"]) -> MetaOapg.properties.urlThumbprints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedCertificates"]) -> MetaOapg.properties.trustedCertificates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ws1IntelligenceCredentials"]) -> 'WS1IntelligenceCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "encodedCredentialsFileContent", "urlThumbprints", "trustedCertificates", "ws1IntelligenceCredentials", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encodedCredentialsFileContent"]) -> typing.Union[MetaOapg.properties.encodedCredentialsFileContent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urlThumbprints"]) -> typing.Union[MetaOapg.properties.urlThumbprints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedCertificates"]) -> typing.Union[MetaOapg.properties.trustedCertificates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ws1IntelligenceCredentials"]) -> typing.Union['WS1IntelligenceCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "encodedCredentialsFileContent", "urlThumbprints", "trustedCertificates", "ws1IntelligenceCredentials", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        encodedCredentialsFileContent: typing.Union[MetaOapg.properties.encodedCredentialsFileContent, str, schemas.Unset] = schemas.unset,
        urlThumbprints: typing.Union[MetaOapg.properties.urlThumbprints, str, schemas.Unset] = schemas.unset,
        trustedCertificates: typing.Union[MetaOapg.properties.trustedCertificates, list, tuple, schemas.Unset] = schemas.unset,
        ws1IntelligenceCredentials: typing.Union['WS1IntelligenceCredentials', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkspaceOneIntelligenceSettings':
        return super().__new__(
            cls,
            *_args,
            name=name,
            encodedCredentialsFileContent=encodedCredentialsFileContent,
            urlThumbprints=urlThumbprints,
            trustedCertificates=trustedCertificates,
            ws1IntelligenceCredentials=ws1IntelligenceCredentials,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.public_key_or_cert import PublicKeyOrCert
from openapi_client.model.ws1_intelligence_credentials import WS1IntelligenceCredentials
