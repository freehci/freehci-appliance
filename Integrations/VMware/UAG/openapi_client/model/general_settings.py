# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GeneralSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            source = schemas.StrSchema
            target = schemas.StrSchema
            ds = schemas.StrSchema
            diskMode = schemas.StrSchema
            netInternet = schemas.StrSchema
            netManagementNetwork = schemas.StrSchema
            netBackendNetwork = schemas.StrSchema
            ipMode0 = schemas.StrSchema
            ipMode1 = schemas.StrSchema
            ipMode2 = schemas.StrSchema
            ip0 = schemas.StrSchema
            eth0ErrorMsg = schemas.StrSchema
            
            
            class eth0CustomConfig(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(([a-zA-Z0-9\-]+)\^[a-zA-Z0-9\-]+=[a-zA-Z0-9:!,~'"%#_@\[\]\.\s\-]*;)+$',  # noqa: E501
                    }]
            routes0 = schemas.StrSchema
            netmask0 = schemas.StrSchema
            gateway0 = schemas.StrSchema
            forceNetmask0 = schemas.StrSchema
            forceIpv6Prefix0 = schemas.StrSchema
            
            
            class ip0AllocationMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            defaultGateway = schemas.StrSchema
            v6DefaultGateway = schemas.StrSchema
            ip1 = schemas.StrSchema
            eth1ErrorMsg = schemas.StrSchema
            
            
            class eth1CustomConfig(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(([a-zA-Z0-9\-]+)\^[a-zA-Z0-9\-]+=[a-zA-Z0-9:!,~'"%#_@\[\]\.\s\-]*;)+$',  # noqa: E501
                    }]
            routes1 = schemas.StrSchema
            netmask1 = schemas.StrSchema
            gateway1 = schemas.StrSchema
            forceNetmask1 = schemas.StrSchema
            forceIpv6Prefix1 = schemas.StrSchema
            
            
            class ip1AllocationMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            ip2 = schemas.StrSchema
            eth2ErrorMsg = schemas.StrSchema
            
            
            class eth2CustomConfig(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(([a-zA-Z0-9\-]+)\^[a-zA-Z0-9\-]+=[a-zA-Z0-9:!,~'"%#_@\[\]\.\s\-]*;)+$',  # noqa: E501
                    }]
            routes2 = schemas.StrSchema
            netmask2 = schemas.StrSchema
            gateway2 = schemas.StrSchema
            forceNetmask2 = schemas.StrSchema
            forceIpv6Prefix2 = schemas.StrSchema
            
            
            class ip2AllocationMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            deploymentOption = schemas.StrSchema
            DNS = schemas.StrSchema
            DNS0 = schemas.StrSchema
            forwardrules = schemas.StrSchema
            v6ip0 = schemas.StrSchema
            v6ip1 = schemas.StrSchema
            v6ip2 = schemas.StrSchema
            ipv6prefix0 = schemas.StrSchema
            ipv6prefix1 = schemas.StrSchema
            ipv6prefix2 = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "source": source,
                "target": target,
                "ds": ds,
                "diskMode": diskMode,
                "netInternet": netInternet,
                "netManagementNetwork": netManagementNetwork,
                "netBackendNetwork": netBackendNetwork,
                "ipMode0": ipMode0,
                "ipMode1": ipMode1,
                "ipMode2": ipMode2,
                "ip0": ip0,
                "eth0ErrorMsg": eth0ErrorMsg,
                "eth0CustomConfig": eth0CustomConfig,
                "routes0": routes0,
                "netmask0": netmask0,
                "gateway0": gateway0,
                "forceNetmask0": forceNetmask0,
                "forceIpv6Prefix0": forceIpv6Prefix0,
                "ip0AllocationMode": ip0AllocationMode,
                "defaultGateway": defaultGateway,
                "v6DefaultGateway": v6DefaultGateway,
                "ip1": ip1,
                "eth1ErrorMsg": eth1ErrorMsg,
                "eth1CustomConfig": eth1CustomConfig,
                "routes1": routes1,
                "netmask1": netmask1,
                "gateway1": gateway1,
                "forceNetmask1": forceNetmask1,
                "forceIpv6Prefix1": forceIpv6Prefix1,
                "ip1AllocationMode": ip1AllocationMode,
                "ip2": ip2,
                "eth2ErrorMsg": eth2ErrorMsg,
                "eth2CustomConfig": eth2CustomConfig,
                "routes2": routes2,
                "netmask2": netmask2,
                "gateway2": gateway2,
                "forceNetmask2": forceNetmask2,
                "forceIpv6Prefix2": forceIpv6Prefix2,
                "ip2AllocationMode": ip2AllocationMode,
                "deploymentOption": deploymentOption,
                "DNS": DNS,
                "DNS0": DNS0,
                "forwardrules": forwardrules,
                "v6ip0": v6ip0,
                "v6ip1": v6ip1,
                "v6ip2": v6ip2,
                "ipv6prefix0": ipv6prefix0,
                "ipv6prefix1": ipv6prefix1,
                "ipv6prefix2": ipv6prefix2,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ds"]) -> MetaOapg.properties.ds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diskMode"]) -> MetaOapg.properties.diskMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netInternet"]) -> MetaOapg.properties.netInternet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netManagementNetwork"]) -> MetaOapg.properties.netManagementNetwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netBackendNetwork"]) -> MetaOapg.properties.netBackendNetwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipMode0"]) -> MetaOapg.properties.ipMode0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipMode1"]) -> MetaOapg.properties.ipMode1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipMode2"]) -> MetaOapg.properties.ipMode2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip0"]) -> MetaOapg.properties.ip0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth0ErrorMsg"]) -> MetaOapg.properties.eth0ErrorMsg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth0CustomConfig"]) -> MetaOapg.properties.eth0CustomConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routes0"]) -> MetaOapg.properties.routes0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask0"]) -> MetaOapg.properties.netmask0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway0"]) -> MetaOapg.properties.gateway0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceNetmask0"]) -> MetaOapg.properties.forceNetmask0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceIpv6Prefix0"]) -> MetaOapg.properties.forceIpv6Prefix0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip0AllocationMode"]) -> MetaOapg.properties.ip0AllocationMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultGateway"]) -> MetaOapg.properties.defaultGateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["v6DefaultGateway"]) -> MetaOapg.properties.v6DefaultGateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip1"]) -> MetaOapg.properties.ip1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth1ErrorMsg"]) -> MetaOapg.properties.eth1ErrorMsg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth1CustomConfig"]) -> MetaOapg.properties.eth1CustomConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routes1"]) -> MetaOapg.properties.routes1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask1"]) -> MetaOapg.properties.netmask1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway1"]) -> MetaOapg.properties.gateway1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceNetmask1"]) -> MetaOapg.properties.forceNetmask1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceIpv6Prefix1"]) -> MetaOapg.properties.forceIpv6Prefix1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip1AllocationMode"]) -> MetaOapg.properties.ip1AllocationMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip2"]) -> MetaOapg.properties.ip2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth2ErrorMsg"]) -> MetaOapg.properties.eth2ErrorMsg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eth2CustomConfig"]) -> MetaOapg.properties.eth2CustomConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routes2"]) -> MetaOapg.properties.routes2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask2"]) -> MetaOapg.properties.netmask2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway2"]) -> MetaOapg.properties.gateway2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceNetmask2"]) -> MetaOapg.properties.forceNetmask2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceIpv6Prefix2"]) -> MetaOapg.properties.forceIpv6Prefix2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip2AllocationMode"]) -> MetaOapg.properties.ip2AllocationMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentOption"]) -> MetaOapg.properties.deploymentOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DNS"]) -> MetaOapg.properties.DNS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DNS0"]) -> MetaOapg.properties.DNS0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forwardrules"]) -> MetaOapg.properties.forwardrules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["v6ip0"]) -> MetaOapg.properties.v6ip0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["v6ip1"]) -> MetaOapg.properties.v6ip1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["v6ip2"]) -> MetaOapg.properties.v6ip2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6prefix0"]) -> MetaOapg.properties.ipv6prefix0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6prefix1"]) -> MetaOapg.properties.ipv6prefix1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6prefix2"]) -> MetaOapg.properties.ipv6prefix2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "source", "target", "ds", "diskMode", "netInternet", "netManagementNetwork", "netBackendNetwork", "ipMode0", "ipMode1", "ipMode2", "ip0", "eth0ErrorMsg", "eth0CustomConfig", "routes0", "netmask0", "gateway0", "forceNetmask0", "forceIpv6Prefix0", "ip0AllocationMode", "defaultGateway", "v6DefaultGateway", "ip1", "eth1ErrorMsg", "eth1CustomConfig", "routes1", "netmask1", "gateway1", "forceNetmask1", "forceIpv6Prefix1", "ip1AllocationMode", "ip2", "eth2ErrorMsg", "eth2CustomConfig", "routes2", "netmask2", "gateway2", "forceNetmask2", "forceIpv6Prefix2", "ip2AllocationMode", "deploymentOption", "DNS", "DNS0", "forwardrules", "v6ip0", "v6ip1", "v6ip2", "ipv6prefix0", "ipv6prefix1", "ipv6prefix2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> typing.Union[MetaOapg.properties.target, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ds"]) -> typing.Union[MetaOapg.properties.ds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diskMode"]) -> typing.Union[MetaOapg.properties.diskMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netInternet"]) -> typing.Union[MetaOapg.properties.netInternet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netManagementNetwork"]) -> typing.Union[MetaOapg.properties.netManagementNetwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netBackendNetwork"]) -> typing.Union[MetaOapg.properties.netBackendNetwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipMode0"]) -> typing.Union[MetaOapg.properties.ipMode0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipMode1"]) -> typing.Union[MetaOapg.properties.ipMode1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipMode2"]) -> typing.Union[MetaOapg.properties.ipMode2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip0"]) -> typing.Union[MetaOapg.properties.ip0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth0ErrorMsg"]) -> typing.Union[MetaOapg.properties.eth0ErrorMsg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth0CustomConfig"]) -> typing.Union[MetaOapg.properties.eth0CustomConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routes0"]) -> typing.Union[MetaOapg.properties.routes0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask0"]) -> typing.Union[MetaOapg.properties.netmask0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway0"]) -> typing.Union[MetaOapg.properties.gateway0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceNetmask0"]) -> typing.Union[MetaOapg.properties.forceNetmask0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceIpv6Prefix0"]) -> typing.Union[MetaOapg.properties.forceIpv6Prefix0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip0AllocationMode"]) -> typing.Union[MetaOapg.properties.ip0AllocationMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultGateway"]) -> typing.Union[MetaOapg.properties.defaultGateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["v6DefaultGateway"]) -> typing.Union[MetaOapg.properties.v6DefaultGateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip1"]) -> typing.Union[MetaOapg.properties.ip1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth1ErrorMsg"]) -> typing.Union[MetaOapg.properties.eth1ErrorMsg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth1CustomConfig"]) -> typing.Union[MetaOapg.properties.eth1CustomConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routes1"]) -> typing.Union[MetaOapg.properties.routes1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask1"]) -> typing.Union[MetaOapg.properties.netmask1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway1"]) -> typing.Union[MetaOapg.properties.gateway1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceNetmask1"]) -> typing.Union[MetaOapg.properties.forceNetmask1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceIpv6Prefix1"]) -> typing.Union[MetaOapg.properties.forceIpv6Prefix1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip1AllocationMode"]) -> typing.Union[MetaOapg.properties.ip1AllocationMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip2"]) -> typing.Union[MetaOapg.properties.ip2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth2ErrorMsg"]) -> typing.Union[MetaOapg.properties.eth2ErrorMsg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eth2CustomConfig"]) -> typing.Union[MetaOapg.properties.eth2CustomConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routes2"]) -> typing.Union[MetaOapg.properties.routes2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask2"]) -> typing.Union[MetaOapg.properties.netmask2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway2"]) -> typing.Union[MetaOapg.properties.gateway2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceNetmask2"]) -> typing.Union[MetaOapg.properties.forceNetmask2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceIpv6Prefix2"]) -> typing.Union[MetaOapg.properties.forceIpv6Prefix2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip2AllocationMode"]) -> typing.Union[MetaOapg.properties.ip2AllocationMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentOption"]) -> typing.Union[MetaOapg.properties.deploymentOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DNS"]) -> typing.Union[MetaOapg.properties.DNS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DNS0"]) -> typing.Union[MetaOapg.properties.DNS0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forwardrules"]) -> typing.Union[MetaOapg.properties.forwardrules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["v6ip0"]) -> typing.Union[MetaOapg.properties.v6ip0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["v6ip1"]) -> typing.Union[MetaOapg.properties.v6ip1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["v6ip2"]) -> typing.Union[MetaOapg.properties.v6ip2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6prefix0"]) -> typing.Union[MetaOapg.properties.ipv6prefix0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6prefix1"]) -> typing.Union[MetaOapg.properties.ipv6prefix1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6prefix2"]) -> typing.Union[MetaOapg.properties.ipv6prefix2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "source", "target", "ds", "diskMode", "netInternet", "netManagementNetwork", "netBackendNetwork", "ipMode0", "ipMode1", "ipMode2", "ip0", "eth0ErrorMsg", "eth0CustomConfig", "routes0", "netmask0", "gateway0", "forceNetmask0", "forceIpv6Prefix0", "ip0AllocationMode", "defaultGateway", "v6DefaultGateway", "ip1", "eth1ErrorMsg", "eth1CustomConfig", "routes1", "netmask1", "gateway1", "forceNetmask1", "forceIpv6Prefix1", "ip1AllocationMode", "ip2", "eth2ErrorMsg", "eth2CustomConfig", "routes2", "netmask2", "gateway2", "forceNetmask2", "forceIpv6Prefix2", "ip2AllocationMode", "deploymentOption", "DNS", "DNS0", "forwardrules", "v6ip0", "v6ip1", "v6ip2", "ipv6prefix0", "ipv6prefix1", "ipv6prefix2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        target: typing.Union[MetaOapg.properties.target, str, schemas.Unset] = schemas.unset,
        ds: typing.Union[MetaOapg.properties.ds, str, schemas.Unset] = schemas.unset,
        diskMode: typing.Union[MetaOapg.properties.diskMode, str, schemas.Unset] = schemas.unset,
        netInternet: typing.Union[MetaOapg.properties.netInternet, str, schemas.Unset] = schemas.unset,
        netManagementNetwork: typing.Union[MetaOapg.properties.netManagementNetwork, str, schemas.Unset] = schemas.unset,
        netBackendNetwork: typing.Union[MetaOapg.properties.netBackendNetwork, str, schemas.Unset] = schemas.unset,
        ipMode0: typing.Union[MetaOapg.properties.ipMode0, str, schemas.Unset] = schemas.unset,
        ipMode1: typing.Union[MetaOapg.properties.ipMode1, str, schemas.Unset] = schemas.unset,
        ipMode2: typing.Union[MetaOapg.properties.ipMode2, str, schemas.Unset] = schemas.unset,
        ip0: typing.Union[MetaOapg.properties.ip0, str, schemas.Unset] = schemas.unset,
        eth0ErrorMsg: typing.Union[MetaOapg.properties.eth0ErrorMsg, str, schemas.Unset] = schemas.unset,
        eth0CustomConfig: typing.Union[MetaOapg.properties.eth0CustomConfig, str, schemas.Unset] = schemas.unset,
        routes0: typing.Union[MetaOapg.properties.routes0, str, schemas.Unset] = schemas.unset,
        netmask0: typing.Union[MetaOapg.properties.netmask0, str, schemas.Unset] = schemas.unset,
        gateway0: typing.Union[MetaOapg.properties.gateway0, str, schemas.Unset] = schemas.unset,
        forceNetmask0: typing.Union[MetaOapg.properties.forceNetmask0, str, schemas.Unset] = schemas.unset,
        forceIpv6Prefix0: typing.Union[MetaOapg.properties.forceIpv6Prefix0, str, schemas.Unset] = schemas.unset,
        ip0AllocationMode: typing.Union[MetaOapg.properties.ip0AllocationMode, str, schemas.Unset] = schemas.unset,
        defaultGateway: typing.Union[MetaOapg.properties.defaultGateway, str, schemas.Unset] = schemas.unset,
        v6DefaultGateway: typing.Union[MetaOapg.properties.v6DefaultGateway, str, schemas.Unset] = schemas.unset,
        ip1: typing.Union[MetaOapg.properties.ip1, str, schemas.Unset] = schemas.unset,
        eth1ErrorMsg: typing.Union[MetaOapg.properties.eth1ErrorMsg, str, schemas.Unset] = schemas.unset,
        eth1CustomConfig: typing.Union[MetaOapg.properties.eth1CustomConfig, str, schemas.Unset] = schemas.unset,
        routes1: typing.Union[MetaOapg.properties.routes1, str, schemas.Unset] = schemas.unset,
        netmask1: typing.Union[MetaOapg.properties.netmask1, str, schemas.Unset] = schemas.unset,
        gateway1: typing.Union[MetaOapg.properties.gateway1, str, schemas.Unset] = schemas.unset,
        forceNetmask1: typing.Union[MetaOapg.properties.forceNetmask1, str, schemas.Unset] = schemas.unset,
        forceIpv6Prefix1: typing.Union[MetaOapg.properties.forceIpv6Prefix1, str, schemas.Unset] = schemas.unset,
        ip1AllocationMode: typing.Union[MetaOapg.properties.ip1AllocationMode, str, schemas.Unset] = schemas.unset,
        ip2: typing.Union[MetaOapg.properties.ip2, str, schemas.Unset] = schemas.unset,
        eth2ErrorMsg: typing.Union[MetaOapg.properties.eth2ErrorMsg, str, schemas.Unset] = schemas.unset,
        eth2CustomConfig: typing.Union[MetaOapg.properties.eth2CustomConfig, str, schemas.Unset] = schemas.unset,
        routes2: typing.Union[MetaOapg.properties.routes2, str, schemas.Unset] = schemas.unset,
        netmask2: typing.Union[MetaOapg.properties.netmask2, str, schemas.Unset] = schemas.unset,
        gateway2: typing.Union[MetaOapg.properties.gateway2, str, schemas.Unset] = schemas.unset,
        forceNetmask2: typing.Union[MetaOapg.properties.forceNetmask2, str, schemas.Unset] = schemas.unset,
        forceIpv6Prefix2: typing.Union[MetaOapg.properties.forceIpv6Prefix2, str, schemas.Unset] = schemas.unset,
        ip2AllocationMode: typing.Union[MetaOapg.properties.ip2AllocationMode, str, schemas.Unset] = schemas.unset,
        deploymentOption: typing.Union[MetaOapg.properties.deploymentOption, str, schemas.Unset] = schemas.unset,
        DNS: typing.Union[MetaOapg.properties.DNS, str, schemas.Unset] = schemas.unset,
        DNS0: typing.Union[MetaOapg.properties.DNS0, str, schemas.Unset] = schemas.unset,
        forwardrules: typing.Union[MetaOapg.properties.forwardrules, str, schemas.Unset] = schemas.unset,
        v6ip0: typing.Union[MetaOapg.properties.v6ip0, str, schemas.Unset] = schemas.unset,
        v6ip1: typing.Union[MetaOapg.properties.v6ip1, str, schemas.Unset] = schemas.unset,
        v6ip2: typing.Union[MetaOapg.properties.v6ip2, str, schemas.Unset] = schemas.unset,
        ipv6prefix0: typing.Union[MetaOapg.properties.ipv6prefix0, str, schemas.Unset] = schemas.unset,
        ipv6prefix1: typing.Union[MetaOapg.properties.ipv6prefix1, str, schemas.Unset] = schemas.unset,
        ipv6prefix2: typing.Union[MetaOapg.properties.ipv6prefix2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GeneralSettings':
        return super().__new__(
            cls,
            *_args,
            name=name,
            source=source,
            target=target,
            ds=ds,
            diskMode=diskMode,
            netInternet=netInternet,
            netManagementNetwork=netManagementNetwork,
            netBackendNetwork=netBackendNetwork,
            ipMode0=ipMode0,
            ipMode1=ipMode1,
            ipMode2=ipMode2,
            ip0=ip0,
            eth0ErrorMsg=eth0ErrorMsg,
            eth0CustomConfig=eth0CustomConfig,
            routes0=routes0,
            netmask0=netmask0,
            gateway0=gateway0,
            forceNetmask0=forceNetmask0,
            forceIpv6Prefix0=forceIpv6Prefix0,
            ip0AllocationMode=ip0AllocationMode,
            defaultGateway=defaultGateway,
            v6DefaultGateway=v6DefaultGateway,
            ip1=ip1,
            eth1ErrorMsg=eth1ErrorMsg,
            eth1CustomConfig=eth1CustomConfig,
            routes1=routes1,
            netmask1=netmask1,
            gateway1=gateway1,
            forceNetmask1=forceNetmask1,
            forceIpv6Prefix1=forceIpv6Prefix1,
            ip1AllocationMode=ip1AllocationMode,
            ip2=ip2,
            eth2ErrorMsg=eth2ErrorMsg,
            eth2CustomConfig=eth2CustomConfig,
            routes2=routes2,
            netmask2=netmask2,
            gateway2=gateway2,
            forceNetmask2=forceNetmask2,
            forceIpv6Prefix2=forceIpv6Prefix2,
            ip2AllocationMode=ip2AllocationMode,
            deploymentOption=deploymentOption,
            DNS=DNS,
            DNS0=DNS0,
            forwardrules=forwardrules,
            v6ip0=v6ip0,
            v6ip1=v6ip1,
            v6ip2=v6ip2,
            ipv6prefix0=ipv6prefix0,
            ipv6prefix1=ipv6prefix1,
            ipv6prefix2=ipv6prefix2,
            _configuration=_configuration,
            **kwargs,
        )
