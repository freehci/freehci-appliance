# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class HostedResourceMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[[\p{L}\p{N}\p{M}_.-]+( [\p{L}\p{N}\p{M}_.-]+)]{1,50}$',  # noqa: E501
                    }]
            path = schemas.StrSchema
            sha256Sum = schemas.StrSchema
            params = schemas.StrSchema
        
            @staticmethod
            def flags() -> typing.Type['Flags']:
                return Flags
            executable = schemas.StrSchema
            isObtainedfromURL = schemas.BoolSchema
            
            
            class fileType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Windows": "WINDOWS",
                        "Mac": "MAC",
                    }
                
                @schemas.classproperty
                def WINDOWS(cls):
                    return cls("Windows")
                
                @schemas.classproperty
                def MAC(cls):
                    return cls("Mac")
            
            
            class trustedSigningCertificates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PublicKeyOrCert']:
                        return PublicKeyOrCert
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PublicKeyOrCert'], typing.List['PublicKeyOrCert']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trustedSigningCertificates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PublicKeyOrCert':
                    return super().__getitem__(i)
            osType = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "path": path,
                "sha256Sum": sha256Sum,
                "params": params,
                "flags": flags,
                "executable": executable,
                "isObtainedfromURL": isObtainedfromURL,
                "fileType": fileType,
                "trustedSigningCertificates": trustedSigningCertificates,
                "osType": osType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha256Sum"]) -> MetaOapg.properties.sha256Sum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> MetaOapg.properties.params: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> 'Flags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executable"]) -> MetaOapg.properties.executable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isObtainedfromURL"]) -> MetaOapg.properties.isObtainedfromURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileType"]) -> MetaOapg.properties.fileType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedSigningCertificates"]) -> MetaOapg.properties.trustedSigningCertificates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["osType"]) -> MetaOapg.properties.osType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "path", "sha256Sum", "params", "flags", "executable", "isObtainedfromURL", "fileType", "trustedSigningCertificates", "osType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha256Sum"]) -> typing.Union[MetaOapg.properties.sha256Sum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> typing.Union[MetaOapg.properties.params, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> typing.Union['Flags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executable"]) -> typing.Union[MetaOapg.properties.executable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isObtainedfromURL"]) -> typing.Union[MetaOapg.properties.isObtainedfromURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileType"]) -> typing.Union[MetaOapg.properties.fileType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedSigningCertificates"]) -> typing.Union[MetaOapg.properties.trustedSigningCertificates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["osType"]) -> typing.Union[MetaOapg.properties.osType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "path", "sha256Sum", "params", "flags", "executable", "isObtainedfromURL", "fileType", "trustedSigningCertificates", "osType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        sha256Sum: typing.Union[MetaOapg.properties.sha256Sum, str, schemas.Unset] = schemas.unset,
        params: typing.Union[MetaOapg.properties.params, str, schemas.Unset] = schemas.unset,
        flags: typing.Union['Flags', schemas.Unset] = schemas.unset,
        executable: typing.Union[MetaOapg.properties.executable, str, schemas.Unset] = schemas.unset,
        isObtainedfromURL: typing.Union[MetaOapg.properties.isObtainedfromURL, bool, schemas.Unset] = schemas.unset,
        fileType: typing.Union[MetaOapg.properties.fileType, str, schemas.Unset] = schemas.unset,
        trustedSigningCertificates: typing.Union[MetaOapg.properties.trustedSigningCertificates, list, tuple, schemas.Unset] = schemas.unset,
        osType: typing.Union[MetaOapg.properties.osType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HostedResourceMetadata':
        return super().__new__(
            cls,
            *_args,
            name=name,
            path=path,
            sha256Sum=sha256Sum,
            params=params,
            flags=flags,
            executable=executable,
            isObtainedfromURL=isObtainedfromURL,
            fileType=fileType,
            trustedSigningCertificates=trustedSigningCertificates,
            osType=osType,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.flags import Flags
from openapi_client.model.public_key_or_cert import PublicKeyOrCert
