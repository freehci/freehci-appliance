# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class LoadBalancerSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "virtualIPAddress",
            "groupID",
            "loadBalancerMode",
        }
        
        class properties:
            virtualIPAddress = schemas.StrSchema
            groupID = schemas.Int32Schema
            
            
            class loadBalancerMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ONEARM(cls):
                    return cls("ONEARM")
            __annotations__ = {
                "virtualIPAddress": virtualIPAddress,
                "groupID": groupID,
                "loadBalancerMode": loadBalancerMode,
            }
    
    virtualIPAddress: MetaOapg.properties.virtualIPAddress
    groupID: MetaOapg.properties.groupID
    loadBalancerMode: MetaOapg.properties.loadBalancerMode
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["virtualIPAddress"]) -> MetaOapg.properties.virtualIPAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupID"]) -> MetaOapg.properties.groupID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadBalancerMode"]) -> MetaOapg.properties.loadBalancerMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["virtualIPAddress", "groupID", "loadBalancerMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["virtualIPAddress"]) -> MetaOapg.properties.virtualIPAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupID"]) -> MetaOapg.properties.groupID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadBalancerMode"]) -> MetaOapg.properties.loadBalancerMode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["virtualIPAddress", "groupID", "loadBalancerMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        virtualIPAddress: typing.Union[MetaOapg.properties.virtualIPAddress, str, ],
        groupID: typing.Union[MetaOapg.properties.groupID, decimal.Decimal, int, ],
        loadBalancerMode: typing.Union[MetaOapg.properties.loadBalancerMode, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LoadBalancerSettings':
        return super().__new__(
            cls,
            *_args,
            virtualIPAddress=virtualIPAddress,
            groupID=groupID,
            loadBalancerMode=loadBalancerMode,
            _configuration=_configuration,
            **kwargs,
        )
