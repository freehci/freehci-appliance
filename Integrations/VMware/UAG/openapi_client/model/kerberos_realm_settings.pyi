# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class KerberosRealmSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "kdcHostNameList",
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class kdcHostNameList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'kdcHostNameList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            kdcTimeout = schemas.Int32Schema
            noOfWRPsUsingThisRealm = schemas.Int32Schema
            __annotations__ = {
                "name": name,
                "kdcHostNameList": kdcHostNameList,
                "kdcTimeout": kdcTimeout,
                "noOfWRPsUsingThisRealm": noOfWRPsUsingThisRealm,
            }
    
    kdcHostNameList: MetaOapg.properties.kdcHostNameList
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kdcHostNameList"]) -> MetaOapg.properties.kdcHostNameList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kdcTimeout"]) -> MetaOapg.properties.kdcTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noOfWRPsUsingThisRealm"]) -> MetaOapg.properties.noOfWRPsUsingThisRealm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "kdcHostNameList", "kdcTimeout", "noOfWRPsUsingThisRealm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kdcHostNameList"]) -> MetaOapg.properties.kdcHostNameList: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kdcTimeout"]) -> typing.Union[MetaOapg.properties.kdcTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noOfWRPsUsingThisRealm"]) -> typing.Union[MetaOapg.properties.noOfWRPsUsingThisRealm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "kdcHostNameList", "kdcTimeout", "noOfWRPsUsingThisRealm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        kdcHostNameList: typing.Union[MetaOapg.properties.kdcHostNameList, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        kdcTimeout: typing.Union[MetaOapg.properties.kdcTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        noOfWRPsUsingThisRealm: typing.Union[MetaOapg.properties.noOfWRPsUsingThisRealm, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'KerberosRealmSettings':
        return super().__new__(
            cls,
            *_args,
            kdcHostNameList=kdcHostNameList,
            name=name,
            kdcTimeout=kdcTimeout,
            noOfWRPsUsingThisRealm=noOfWRPsUsingThisRealm,
            _configuration=_configuration,
            **kwargs,
        )
