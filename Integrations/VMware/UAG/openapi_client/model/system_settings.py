# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SystemSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "coreDumpSettings",
        }
        
        class properties:
        
            @staticmethod
            def coreDumpSettings() -> typing.Type['CoreDumpSettings']:
                return CoreDumpSettings
            fipsEnabled = schemas.BoolSchema
            adminPasswordExpirationDays = schemas.Int32Schema
            adminSessionIdleTimeoutMinutes = schemas.Int32Schema
            adminMaxConcurrentSessions = schemas.Int32Schema
            rootPasswordExpirationDays = schemas.Int32Schema
            rootSessionIdleTimeoutSeconds = schemas.Int32Schema
            osLoginUsername = schemas.StrSchema
            osMaxLoginLimit = schemas.StrSchema
            
            
            class monitoringUsersPasswordExpirationDays(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999
                    inclusive_minimum = 0
        
            @staticmethod
            def adminPasswordPolicySettings() -> typing.Type['PasswordPolicySettings']:
                return PasswordPolicySettings
        
            @staticmethod
            def passwordPolicySettings() -> typing.Type['PasswordPolicySettings']:
                return PasswordPolicySettings
            cipherSuites = schemas.StrSchema
            outboundCipherSuites = schemas.StrSchema
            
            
            class sslProvider(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "JDK": "JDK",
                        "OPENSSL": "OPENSSL",
                        "OPENSSL_REFCNT": "OPENSSL_REFCNT",
                    }
                
                @schemas.classproperty
                def JDK(cls):
                    return cls("JDK")
                
                @schemas.classproperty
                def OPENSSL(cls):
                    return cls("OPENSSL")
                
                @schemas.classproperty
                def OPENSSL_REFCNT(cls):
                    return cls("OPENSSL_REFCNT")
            tlsNamedGroups = schemas.StrSchema
            tlsSignatureSchemes = schemas.StrSchema
            ssl30Enabled = schemas.BoolSchema
            tls10Enabled = schemas.BoolSchema
            tls11Enabled = schemas.BoolSchema
            tls12Enabled = schemas.BoolSchema
            tls13Enabled = schemas.BoolSchema
            adminDisclaimerText = schemas.StrSchema
            syslogUrl = schemas.StrSchema
            syslogAuditUrl = schemas.StrSchema
            
            
            class sysLogType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "UDP": "UDP",
                        "TCP": "TCP",
                        "TLS": "TLS",
                        "MQTT": "MQTT",
                    }
                
                @schemas.classproperty
                def UDP(cls):
                    return cls("UDP")
                
                @schemas.classproperty
                def TCP(cls):
                    return cls("TCP")
                
                @schemas.classproperty
                def TLS(cls):
                    return cls("TLS")
                
                @schemas.classproperty
                def MQTT(cls):
                    return cls("MQTT")
            syslogServerCACertPem = schemas.StrSchema
            syslogClientCertCertPem = schemas.StrSchema
            syslogClientCertKeyPem = schemas.StrSchema
            
            
            class tlsSyslogServerSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TlsSyslogServerSettings']:
                        return TlsSyslogServerSettings
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TlsSyslogServerSettings'], typing.List['TlsSyslogServerSettings']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tlsSyslogServerSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TlsSyslogServerSettings':
                    return super().__getitem__(i)
            healthCheckUrl = schemas.StrSchema
            enableHTTPHealthMonitor = schemas.BoolSchema
            cookiesToBeCached = schemas.StrSchema
            
            
            class ipMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            
            
            class ipModeforNIC2(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            
            
            class ipModeforNIC3(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STATICV4": "STATICV4",
                        "STATICV6": "STATICV6",
                        "DHCPV4": "DHCPV4",
                        "DHCPV6": "DHCPV6",
                        "AUTOV6": "AUTOV6",
                        "STATICV4_STATICV6": "STATICV4_STATICV6",
                        "STATICV4_DHCPV6": "STATICV4_DHCPV6",
                        "STATICV4_AUTOV6": "STATICV4_AUTOV6",
                        "DHCPV4_STATICV6": "DHCPV4_STATICV6",
                        "DHCPV4_DHCPV6": "DHCPV4_DHCPV6",
                        "DHCPV4_AUTOV6": "DHCPV4_AUTOV6",
                        "Static": "STATIC",
                        "Dynamic": "DYNAMIC",
                    }
                
                @schemas.classproperty
                def STATICV4(cls):
                    return cls("STATICV4")
                
                @schemas.classproperty
                def STATICV6(cls):
                    return cls("STATICV6")
                
                @schemas.classproperty
                def DHCPV4(cls):
                    return cls("DHCPV4")
                
                @schemas.classproperty
                def DHCPV6(cls):
                    return cls("DHCPV6")
                
                @schemas.classproperty
                def AUTOV6(cls):
                    return cls("AUTOV6")
                
                @schemas.classproperty
                def STATICV4_STATICV6(cls):
                    return cls("STATICV4_STATICV6")
                
                @schemas.classproperty
                def STATICV4_DHCPV6(cls):
                    return cls("STATICV4_DHCPV6")
                
                @schemas.classproperty
                def STATICV4_AUTOV6(cls):
                    return cls("STATICV4_AUTOV6")
                
                @schemas.classproperty
                def DHCPV4_STATICV6(cls):
                    return cls("DHCPV4_STATICV6")
                
                @schemas.classproperty
                def DHCPV4_DHCPV6(cls):
                    return cls("DHCPV4_DHCPV6")
                
                @schemas.classproperty
                def DHCPV4_AUTOV6(cls):
                    return cls("DHCPV4_AUTOV6")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
            defaultRedirectHost = schemas.StrSchema
            
            
            class sessionTimeout(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            requestTimeoutMsec = schemas.Int64Schema
            bodyReceiveTimeoutMsec = schemas.Int64Schema
            
            
            class authenticationTimeout(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            quiesceMode = schemas.BoolSchema
            
            
            class monitorInterval(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 9999
                    inclusive_minimum = 0
            samlCertRolloverSupported = schemas.BoolSchema
            httpConnectionTimeout = schemas.Int32Schema
            tlsPortSharingEnabled = schemas.BoolSchema
            uagName = schemas.StrSchema
            ceipEnabled = schemas.BoolSchema
            adminCertRolledBack = schemas.BoolSchema
            clientConnectionIdleTimeout = schemas.Int32Schema
            sshEnabled = schemas.BoolSchema
            sshPasswordAccessEnabled = schemas.BoolSchema
            sshKeyAccessEnabled = schemas.BoolSchema
            sshInterface = schemas.StrSchema
            sshPort = schemas.StrSchema
            sshLoginBannerText = schemas.StrSchema
            
            
            class sshPublicKeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SshPublicKey']:
                        return SshPublicKey
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SshPublicKey'], typing.List['SshPublicKey']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sshPublicKeys':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SshPublicKey':
                    return super().__getitem__(i)
            dns = schemas.StrSchema
            dnsSearch = schemas.StrSchema
            snmpEnabled = schemas.BoolSchema
        
            @staticmethod
            def snmpSettings() -> typing.Type['SnmpSettings']:
                return SnmpSettings
            hostClockSyncSupported = schemas.BoolSchema
            hostClockSyncEnabled = schemas.BoolSchema
            ntpServers = schemas.StrSchema
            fallBackNtpServers = schemas.StrSchema
            clockSkewTolerance = schemas.Int32Schema
            maxConnectionsAllowedPerSession = schemas.Int32Schema
            maxSystemCPUAllowed = schemas.Int32Schema
            allowedHostHeaderValues = schemas.StrSchema
            enabledAdvancedFeatures = schemas.StrSchema
            secureRandomSource = schemas.StrSchema
            forcedRestart = schemas.BoolSchema
            extendedServerCertValidationEnabled = schemas.BoolSchema
            commandsFirstBoot = schemas.StrSchema
            commandsEveryBoot = schemas.StrSchema
            dsComplianceOS = schemas.BoolSchema
            unrecognizedSessionsMonitoringEnabled = schemas.BoolSchema
            __annotations__ = {
                "coreDumpSettings": coreDumpSettings,
                "fipsEnabled": fipsEnabled,
                "adminPasswordExpirationDays": adminPasswordExpirationDays,
                "adminSessionIdleTimeoutMinutes": adminSessionIdleTimeoutMinutes,
                "adminMaxConcurrentSessions": adminMaxConcurrentSessions,
                "rootPasswordExpirationDays": rootPasswordExpirationDays,
                "rootSessionIdleTimeoutSeconds": rootSessionIdleTimeoutSeconds,
                "osLoginUsername": osLoginUsername,
                "osMaxLoginLimit": osMaxLoginLimit,
                "monitoringUsersPasswordExpirationDays": monitoringUsersPasswordExpirationDays,
                "adminPasswordPolicySettings": adminPasswordPolicySettings,
                "passwordPolicySettings": passwordPolicySettings,
                "cipherSuites": cipherSuites,
                "outboundCipherSuites": outboundCipherSuites,
                "sslProvider": sslProvider,
                "tlsNamedGroups": tlsNamedGroups,
                "tlsSignatureSchemes": tlsSignatureSchemes,
                "ssl30Enabled": ssl30Enabled,
                "tls10Enabled": tls10Enabled,
                "tls11Enabled": tls11Enabled,
                "tls12Enabled": tls12Enabled,
                "tls13Enabled": tls13Enabled,
                "adminDisclaimerText": adminDisclaimerText,
                "syslogUrl": syslogUrl,
                "syslogAuditUrl": syslogAuditUrl,
                "sysLogType": sysLogType,
                "syslogServerCACertPem": syslogServerCACertPem,
                "syslogClientCertCertPem": syslogClientCertCertPem,
                "syslogClientCertKeyPem": syslogClientCertKeyPem,
                "tlsSyslogServerSettings": tlsSyslogServerSettings,
                "healthCheckUrl": healthCheckUrl,
                "enableHTTPHealthMonitor": enableHTTPHealthMonitor,
                "cookiesToBeCached": cookiesToBeCached,
                "ipMode": ipMode,
                "ipModeforNIC2": ipModeforNIC2,
                "ipModeforNIC3": ipModeforNIC3,
                "defaultRedirectHost": defaultRedirectHost,
                "sessionTimeout": sessionTimeout,
                "requestTimeoutMsec": requestTimeoutMsec,
                "bodyReceiveTimeoutMsec": bodyReceiveTimeoutMsec,
                "authenticationTimeout": authenticationTimeout,
                "quiesceMode": quiesceMode,
                "monitorInterval": monitorInterval,
                "samlCertRolloverSupported": samlCertRolloverSupported,
                "httpConnectionTimeout": httpConnectionTimeout,
                "tlsPortSharingEnabled": tlsPortSharingEnabled,
                "uagName": uagName,
                "ceipEnabled": ceipEnabled,
                "adminCertRolledBack": adminCertRolledBack,
                "clientConnectionIdleTimeout": clientConnectionIdleTimeout,
                "sshEnabled": sshEnabled,
                "sshPasswordAccessEnabled": sshPasswordAccessEnabled,
                "sshKeyAccessEnabled": sshKeyAccessEnabled,
                "sshInterface": sshInterface,
                "sshPort": sshPort,
                "sshLoginBannerText": sshLoginBannerText,
                "sshPublicKeys": sshPublicKeys,
                "dns": dns,
                "dnsSearch": dnsSearch,
                "snmpEnabled": snmpEnabled,
                "snmpSettings": snmpSettings,
                "hostClockSyncSupported": hostClockSyncSupported,
                "hostClockSyncEnabled": hostClockSyncEnabled,
                "ntpServers": ntpServers,
                "fallBackNtpServers": fallBackNtpServers,
                "clockSkewTolerance": clockSkewTolerance,
                "maxConnectionsAllowedPerSession": maxConnectionsAllowedPerSession,
                "maxSystemCPUAllowed": maxSystemCPUAllowed,
                "allowedHostHeaderValues": allowedHostHeaderValues,
                "enabledAdvancedFeatures": enabledAdvancedFeatures,
                "secureRandomSource": secureRandomSource,
                "forcedRestart": forcedRestart,
                "extendedServerCertValidationEnabled": extendedServerCertValidationEnabled,
                "commandsFirstBoot": commandsFirstBoot,
                "commandsEveryBoot": commandsEveryBoot,
                "dsComplianceOS": dsComplianceOS,
                "unrecognizedSessionsMonitoringEnabled": unrecognizedSessionsMonitoringEnabled,
            }
    
    coreDumpSettings: 'CoreDumpSettings'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coreDumpSettings"]) -> 'CoreDumpSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fipsEnabled"]) -> MetaOapg.properties.fipsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminPasswordExpirationDays"]) -> MetaOapg.properties.adminPasswordExpirationDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminSessionIdleTimeoutMinutes"]) -> MetaOapg.properties.adminSessionIdleTimeoutMinutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminMaxConcurrentSessions"]) -> MetaOapg.properties.adminMaxConcurrentSessions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootPasswordExpirationDays"]) -> MetaOapg.properties.rootPasswordExpirationDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootSessionIdleTimeoutSeconds"]) -> MetaOapg.properties.rootSessionIdleTimeoutSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["osLoginUsername"]) -> MetaOapg.properties.osLoginUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["osMaxLoginLimit"]) -> MetaOapg.properties.osMaxLoginLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitoringUsersPasswordExpirationDays"]) -> MetaOapg.properties.monitoringUsersPasswordExpirationDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminPasswordPolicySettings"]) -> 'PasswordPolicySettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwordPolicySettings"]) -> 'PasswordPolicySettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cipherSuites"]) -> MetaOapg.properties.cipherSuites: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outboundCipherSuites"]) -> MetaOapg.properties.outboundCipherSuites: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sslProvider"]) -> MetaOapg.properties.sslProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsNamedGroups"]) -> MetaOapg.properties.tlsNamedGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsSignatureSchemes"]) -> MetaOapg.properties.tlsSignatureSchemes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssl30Enabled"]) -> MetaOapg.properties.ssl30Enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls10Enabled"]) -> MetaOapg.properties.tls10Enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls11Enabled"]) -> MetaOapg.properties.tls11Enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls12Enabled"]) -> MetaOapg.properties.tls12Enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls13Enabled"]) -> MetaOapg.properties.tls13Enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminDisclaimerText"]) -> MetaOapg.properties.adminDisclaimerText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogUrl"]) -> MetaOapg.properties.syslogUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogAuditUrl"]) -> MetaOapg.properties.syslogAuditUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sysLogType"]) -> MetaOapg.properties.sysLogType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogServerCACertPem"]) -> MetaOapg.properties.syslogServerCACertPem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogClientCertCertPem"]) -> MetaOapg.properties.syslogClientCertCertPem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogClientCertKeyPem"]) -> MetaOapg.properties.syslogClientCertKeyPem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsSyslogServerSettings"]) -> MetaOapg.properties.tlsSyslogServerSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthCheckUrl"]) -> MetaOapg.properties.healthCheckUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enableHTTPHealthMonitor"]) -> MetaOapg.properties.enableHTTPHealthMonitor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cookiesToBeCached"]) -> MetaOapg.properties.cookiesToBeCached: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipMode"]) -> MetaOapg.properties.ipMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipModeforNIC2"]) -> MetaOapg.properties.ipModeforNIC2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipModeforNIC3"]) -> MetaOapg.properties.ipModeforNIC3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultRedirectHost"]) -> MetaOapg.properties.defaultRedirectHost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionTimeout"]) -> MetaOapg.properties.sessionTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestTimeoutMsec"]) -> MetaOapg.properties.requestTimeoutMsec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bodyReceiveTimeoutMsec"]) -> MetaOapg.properties.bodyReceiveTimeoutMsec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationTimeout"]) -> MetaOapg.properties.authenticationTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quiesceMode"]) -> MetaOapg.properties.quiesceMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitorInterval"]) -> MetaOapg.properties.monitorInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samlCertRolloverSupported"]) -> MetaOapg.properties.samlCertRolloverSupported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["httpConnectionTimeout"]) -> MetaOapg.properties.httpConnectionTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsPortSharingEnabled"]) -> MetaOapg.properties.tlsPortSharingEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uagName"]) -> MetaOapg.properties.uagName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ceipEnabled"]) -> MetaOapg.properties.ceipEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminCertRolledBack"]) -> MetaOapg.properties.adminCertRolledBack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientConnectionIdleTimeout"]) -> MetaOapg.properties.clientConnectionIdleTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshEnabled"]) -> MetaOapg.properties.sshEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshPasswordAccessEnabled"]) -> MetaOapg.properties.sshPasswordAccessEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshKeyAccessEnabled"]) -> MetaOapg.properties.sshKeyAccessEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshInterface"]) -> MetaOapg.properties.sshInterface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshPort"]) -> MetaOapg.properties.sshPort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshLoginBannerText"]) -> MetaOapg.properties.sshLoginBannerText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sshPublicKeys"]) -> MetaOapg.properties.sshPublicKeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dns"]) -> MetaOapg.properties.dns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dnsSearch"]) -> MetaOapg.properties.dnsSearch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snmpEnabled"]) -> MetaOapg.properties.snmpEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snmpSettings"]) -> 'SnmpSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostClockSyncSupported"]) -> MetaOapg.properties.hostClockSyncSupported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostClockSyncEnabled"]) -> MetaOapg.properties.hostClockSyncEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ntpServers"]) -> MetaOapg.properties.ntpServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallBackNtpServers"]) -> MetaOapg.properties.fallBackNtpServers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockSkewTolerance"]) -> MetaOapg.properties.clockSkewTolerance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxConnectionsAllowedPerSession"]) -> MetaOapg.properties.maxConnectionsAllowedPerSession: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSystemCPUAllowed"]) -> MetaOapg.properties.maxSystemCPUAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedHostHeaderValues"]) -> MetaOapg.properties.allowedHostHeaderValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabledAdvancedFeatures"]) -> MetaOapg.properties.enabledAdvancedFeatures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secureRandomSource"]) -> MetaOapg.properties.secureRandomSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forcedRestart"]) -> MetaOapg.properties.forcedRestart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extendedServerCertValidationEnabled"]) -> MetaOapg.properties.extendedServerCertValidationEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commandsFirstBoot"]) -> MetaOapg.properties.commandsFirstBoot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commandsEveryBoot"]) -> MetaOapg.properties.commandsEveryBoot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dsComplianceOS"]) -> MetaOapg.properties.dsComplianceOS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unrecognizedSessionsMonitoringEnabled"]) -> MetaOapg.properties.unrecognizedSessionsMonitoringEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["coreDumpSettings", "fipsEnabled", "adminPasswordExpirationDays", "adminSessionIdleTimeoutMinutes", "adminMaxConcurrentSessions", "rootPasswordExpirationDays", "rootSessionIdleTimeoutSeconds", "osLoginUsername", "osMaxLoginLimit", "monitoringUsersPasswordExpirationDays", "adminPasswordPolicySettings", "passwordPolicySettings", "cipherSuites", "outboundCipherSuites", "sslProvider", "tlsNamedGroups", "tlsSignatureSchemes", "ssl30Enabled", "tls10Enabled", "tls11Enabled", "tls12Enabled", "tls13Enabled", "adminDisclaimerText", "syslogUrl", "syslogAuditUrl", "sysLogType", "syslogServerCACertPem", "syslogClientCertCertPem", "syslogClientCertKeyPem", "tlsSyslogServerSettings", "healthCheckUrl", "enableHTTPHealthMonitor", "cookiesToBeCached", "ipMode", "ipModeforNIC2", "ipModeforNIC3", "defaultRedirectHost", "sessionTimeout", "requestTimeoutMsec", "bodyReceiveTimeoutMsec", "authenticationTimeout", "quiesceMode", "monitorInterval", "samlCertRolloverSupported", "httpConnectionTimeout", "tlsPortSharingEnabled", "uagName", "ceipEnabled", "adminCertRolledBack", "clientConnectionIdleTimeout", "sshEnabled", "sshPasswordAccessEnabled", "sshKeyAccessEnabled", "sshInterface", "sshPort", "sshLoginBannerText", "sshPublicKeys", "dns", "dnsSearch", "snmpEnabled", "snmpSettings", "hostClockSyncSupported", "hostClockSyncEnabled", "ntpServers", "fallBackNtpServers", "clockSkewTolerance", "maxConnectionsAllowedPerSession", "maxSystemCPUAllowed", "allowedHostHeaderValues", "enabledAdvancedFeatures", "secureRandomSource", "forcedRestart", "extendedServerCertValidationEnabled", "commandsFirstBoot", "commandsEveryBoot", "dsComplianceOS", "unrecognizedSessionsMonitoringEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coreDumpSettings"]) -> 'CoreDumpSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fipsEnabled"]) -> typing.Union[MetaOapg.properties.fipsEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminPasswordExpirationDays"]) -> typing.Union[MetaOapg.properties.adminPasswordExpirationDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminSessionIdleTimeoutMinutes"]) -> typing.Union[MetaOapg.properties.adminSessionIdleTimeoutMinutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminMaxConcurrentSessions"]) -> typing.Union[MetaOapg.properties.adminMaxConcurrentSessions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootPasswordExpirationDays"]) -> typing.Union[MetaOapg.properties.rootPasswordExpirationDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootSessionIdleTimeoutSeconds"]) -> typing.Union[MetaOapg.properties.rootSessionIdleTimeoutSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["osLoginUsername"]) -> typing.Union[MetaOapg.properties.osLoginUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["osMaxLoginLimit"]) -> typing.Union[MetaOapg.properties.osMaxLoginLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitoringUsersPasswordExpirationDays"]) -> typing.Union[MetaOapg.properties.monitoringUsersPasswordExpirationDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminPasswordPolicySettings"]) -> typing.Union['PasswordPolicySettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwordPolicySettings"]) -> typing.Union['PasswordPolicySettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cipherSuites"]) -> typing.Union[MetaOapg.properties.cipherSuites, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outboundCipherSuites"]) -> typing.Union[MetaOapg.properties.outboundCipherSuites, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sslProvider"]) -> typing.Union[MetaOapg.properties.sslProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsNamedGroups"]) -> typing.Union[MetaOapg.properties.tlsNamedGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsSignatureSchemes"]) -> typing.Union[MetaOapg.properties.tlsSignatureSchemes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssl30Enabled"]) -> typing.Union[MetaOapg.properties.ssl30Enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls10Enabled"]) -> typing.Union[MetaOapg.properties.tls10Enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls11Enabled"]) -> typing.Union[MetaOapg.properties.tls11Enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls12Enabled"]) -> typing.Union[MetaOapg.properties.tls12Enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls13Enabled"]) -> typing.Union[MetaOapg.properties.tls13Enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminDisclaimerText"]) -> typing.Union[MetaOapg.properties.adminDisclaimerText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogUrl"]) -> typing.Union[MetaOapg.properties.syslogUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogAuditUrl"]) -> typing.Union[MetaOapg.properties.syslogAuditUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sysLogType"]) -> typing.Union[MetaOapg.properties.sysLogType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogServerCACertPem"]) -> typing.Union[MetaOapg.properties.syslogServerCACertPem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogClientCertCertPem"]) -> typing.Union[MetaOapg.properties.syslogClientCertCertPem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogClientCertKeyPem"]) -> typing.Union[MetaOapg.properties.syslogClientCertKeyPem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsSyslogServerSettings"]) -> typing.Union[MetaOapg.properties.tlsSyslogServerSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthCheckUrl"]) -> typing.Union[MetaOapg.properties.healthCheckUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enableHTTPHealthMonitor"]) -> typing.Union[MetaOapg.properties.enableHTTPHealthMonitor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cookiesToBeCached"]) -> typing.Union[MetaOapg.properties.cookiesToBeCached, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipMode"]) -> typing.Union[MetaOapg.properties.ipMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipModeforNIC2"]) -> typing.Union[MetaOapg.properties.ipModeforNIC2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipModeforNIC3"]) -> typing.Union[MetaOapg.properties.ipModeforNIC3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultRedirectHost"]) -> typing.Union[MetaOapg.properties.defaultRedirectHost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionTimeout"]) -> typing.Union[MetaOapg.properties.sessionTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestTimeoutMsec"]) -> typing.Union[MetaOapg.properties.requestTimeoutMsec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bodyReceiveTimeoutMsec"]) -> typing.Union[MetaOapg.properties.bodyReceiveTimeoutMsec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationTimeout"]) -> typing.Union[MetaOapg.properties.authenticationTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quiesceMode"]) -> typing.Union[MetaOapg.properties.quiesceMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitorInterval"]) -> typing.Union[MetaOapg.properties.monitorInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samlCertRolloverSupported"]) -> typing.Union[MetaOapg.properties.samlCertRolloverSupported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["httpConnectionTimeout"]) -> typing.Union[MetaOapg.properties.httpConnectionTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsPortSharingEnabled"]) -> typing.Union[MetaOapg.properties.tlsPortSharingEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uagName"]) -> typing.Union[MetaOapg.properties.uagName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ceipEnabled"]) -> typing.Union[MetaOapg.properties.ceipEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminCertRolledBack"]) -> typing.Union[MetaOapg.properties.adminCertRolledBack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientConnectionIdleTimeout"]) -> typing.Union[MetaOapg.properties.clientConnectionIdleTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshEnabled"]) -> typing.Union[MetaOapg.properties.sshEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshPasswordAccessEnabled"]) -> typing.Union[MetaOapg.properties.sshPasswordAccessEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshKeyAccessEnabled"]) -> typing.Union[MetaOapg.properties.sshKeyAccessEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshInterface"]) -> typing.Union[MetaOapg.properties.sshInterface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshPort"]) -> typing.Union[MetaOapg.properties.sshPort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshLoginBannerText"]) -> typing.Union[MetaOapg.properties.sshLoginBannerText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sshPublicKeys"]) -> typing.Union[MetaOapg.properties.sshPublicKeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dns"]) -> typing.Union[MetaOapg.properties.dns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dnsSearch"]) -> typing.Union[MetaOapg.properties.dnsSearch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snmpEnabled"]) -> typing.Union[MetaOapg.properties.snmpEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snmpSettings"]) -> typing.Union['SnmpSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostClockSyncSupported"]) -> typing.Union[MetaOapg.properties.hostClockSyncSupported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostClockSyncEnabled"]) -> typing.Union[MetaOapg.properties.hostClockSyncEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ntpServers"]) -> typing.Union[MetaOapg.properties.ntpServers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallBackNtpServers"]) -> typing.Union[MetaOapg.properties.fallBackNtpServers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockSkewTolerance"]) -> typing.Union[MetaOapg.properties.clockSkewTolerance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxConnectionsAllowedPerSession"]) -> typing.Union[MetaOapg.properties.maxConnectionsAllowedPerSession, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSystemCPUAllowed"]) -> typing.Union[MetaOapg.properties.maxSystemCPUAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedHostHeaderValues"]) -> typing.Union[MetaOapg.properties.allowedHostHeaderValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabledAdvancedFeatures"]) -> typing.Union[MetaOapg.properties.enabledAdvancedFeatures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secureRandomSource"]) -> typing.Union[MetaOapg.properties.secureRandomSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forcedRestart"]) -> typing.Union[MetaOapg.properties.forcedRestart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extendedServerCertValidationEnabled"]) -> typing.Union[MetaOapg.properties.extendedServerCertValidationEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commandsFirstBoot"]) -> typing.Union[MetaOapg.properties.commandsFirstBoot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commandsEveryBoot"]) -> typing.Union[MetaOapg.properties.commandsEveryBoot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dsComplianceOS"]) -> typing.Union[MetaOapg.properties.dsComplianceOS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unrecognizedSessionsMonitoringEnabled"]) -> typing.Union[MetaOapg.properties.unrecognizedSessionsMonitoringEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["coreDumpSettings", "fipsEnabled", "adminPasswordExpirationDays", "adminSessionIdleTimeoutMinutes", "adminMaxConcurrentSessions", "rootPasswordExpirationDays", "rootSessionIdleTimeoutSeconds", "osLoginUsername", "osMaxLoginLimit", "monitoringUsersPasswordExpirationDays", "adminPasswordPolicySettings", "passwordPolicySettings", "cipherSuites", "outboundCipherSuites", "sslProvider", "tlsNamedGroups", "tlsSignatureSchemes", "ssl30Enabled", "tls10Enabled", "tls11Enabled", "tls12Enabled", "tls13Enabled", "adminDisclaimerText", "syslogUrl", "syslogAuditUrl", "sysLogType", "syslogServerCACertPem", "syslogClientCertCertPem", "syslogClientCertKeyPem", "tlsSyslogServerSettings", "healthCheckUrl", "enableHTTPHealthMonitor", "cookiesToBeCached", "ipMode", "ipModeforNIC2", "ipModeforNIC3", "defaultRedirectHost", "sessionTimeout", "requestTimeoutMsec", "bodyReceiveTimeoutMsec", "authenticationTimeout", "quiesceMode", "monitorInterval", "samlCertRolloverSupported", "httpConnectionTimeout", "tlsPortSharingEnabled", "uagName", "ceipEnabled", "adminCertRolledBack", "clientConnectionIdleTimeout", "sshEnabled", "sshPasswordAccessEnabled", "sshKeyAccessEnabled", "sshInterface", "sshPort", "sshLoginBannerText", "sshPublicKeys", "dns", "dnsSearch", "snmpEnabled", "snmpSettings", "hostClockSyncSupported", "hostClockSyncEnabled", "ntpServers", "fallBackNtpServers", "clockSkewTolerance", "maxConnectionsAllowedPerSession", "maxSystemCPUAllowed", "allowedHostHeaderValues", "enabledAdvancedFeatures", "secureRandomSource", "forcedRestart", "extendedServerCertValidationEnabled", "commandsFirstBoot", "commandsEveryBoot", "dsComplianceOS", "unrecognizedSessionsMonitoringEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        coreDumpSettings: 'CoreDumpSettings',
        fipsEnabled: typing.Union[MetaOapg.properties.fipsEnabled, bool, schemas.Unset] = schemas.unset,
        adminPasswordExpirationDays: typing.Union[MetaOapg.properties.adminPasswordExpirationDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        adminSessionIdleTimeoutMinutes: typing.Union[MetaOapg.properties.adminSessionIdleTimeoutMinutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        adminMaxConcurrentSessions: typing.Union[MetaOapg.properties.adminMaxConcurrentSessions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rootPasswordExpirationDays: typing.Union[MetaOapg.properties.rootPasswordExpirationDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rootSessionIdleTimeoutSeconds: typing.Union[MetaOapg.properties.rootSessionIdleTimeoutSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        osLoginUsername: typing.Union[MetaOapg.properties.osLoginUsername, str, schemas.Unset] = schemas.unset,
        osMaxLoginLimit: typing.Union[MetaOapg.properties.osMaxLoginLimit, str, schemas.Unset] = schemas.unset,
        monitoringUsersPasswordExpirationDays: typing.Union[MetaOapg.properties.monitoringUsersPasswordExpirationDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        adminPasswordPolicySettings: typing.Union['PasswordPolicySettings', schemas.Unset] = schemas.unset,
        passwordPolicySettings: typing.Union['PasswordPolicySettings', schemas.Unset] = schemas.unset,
        cipherSuites: typing.Union[MetaOapg.properties.cipherSuites, str, schemas.Unset] = schemas.unset,
        outboundCipherSuites: typing.Union[MetaOapg.properties.outboundCipherSuites, str, schemas.Unset] = schemas.unset,
        sslProvider: typing.Union[MetaOapg.properties.sslProvider, str, schemas.Unset] = schemas.unset,
        tlsNamedGroups: typing.Union[MetaOapg.properties.tlsNamedGroups, str, schemas.Unset] = schemas.unset,
        tlsSignatureSchemes: typing.Union[MetaOapg.properties.tlsSignatureSchemes, str, schemas.Unset] = schemas.unset,
        ssl30Enabled: typing.Union[MetaOapg.properties.ssl30Enabled, bool, schemas.Unset] = schemas.unset,
        tls10Enabled: typing.Union[MetaOapg.properties.tls10Enabled, bool, schemas.Unset] = schemas.unset,
        tls11Enabled: typing.Union[MetaOapg.properties.tls11Enabled, bool, schemas.Unset] = schemas.unset,
        tls12Enabled: typing.Union[MetaOapg.properties.tls12Enabled, bool, schemas.Unset] = schemas.unset,
        tls13Enabled: typing.Union[MetaOapg.properties.tls13Enabled, bool, schemas.Unset] = schemas.unset,
        adminDisclaimerText: typing.Union[MetaOapg.properties.adminDisclaimerText, str, schemas.Unset] = schemas.unset,
        syslogUrl: typing.Union[MetaOapg.properties.syslogUrl, str, schemas.Unset] = schemas.unset,
        syslogAuditUrl: typing.Union[MetaOapg.properties.syslogAuditUrl, str, schemas.Unset] = schemas.unset,
        sysLogType: typing.Union[MetaOapg.properties.sysLogType, str, schemas.Unset] = schemas.unset,
        syslogServerCACertPem: typing.Union[MetaOapg.properties.syslogServerCACertPem, str, schemas.Unset] = schemas.unset,
        syslogClientCertCertPem: typing.Union[MetaOapg.properties.syslogClientCertCertPem, str, schemas.Unset] = schemas.unset,
        syslogClientCertKeyPem: typing.Union[MetaOapg.properties.syslogClientCertKeyPem, str, schemas.Unset] = schemas.unset,
        tlsSyslogServerSettings: typing.Union[MetaOapg.properties.tlsSyslogServerSettings, list, tuple, schemas.Unset] = schemas.unset,
        healthCheckUrl: typing.Union[MetaOapg.properties.healthCheckUrl, str, schemas.Unset] = schemas.unset,
        enableHTTPHealthMonitor: typing.Union[MetaOapg.properties.enableHTTPHealthMonitor, bool, schemas.Unset] = schemas.unset,
        cookiesToBeCached: typing.Union[MetaOapg.properties.cookiesToBeCached, str, schemas.Unset] = schemas.unset,
        ipMode: typing.Union[MetaOapg.properties.ipMode, str, schemas.Unset] = schemas.unset,
        ipModeforNIC2: typing.Union[MetaOapg.properties.ipModeforNIC2, str, schemas.Unset] = schemas.unset,
        ipModeforNIC3: typing.Union[MetaOapg.properties.ipModeforNIC3, str, schemas.Unset] = schemas.unset,
        defaultRedirectHost: typing.Union[MetaOapg.properties.defaultRedirectHost, str, schemas.Unset] = schemas.unset,
        sessionTimeout: typing.Union[MetaOapg.properties.sessionTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requestTimeoutMsec: typing.Union[MetaOapg.properties.requestTimeoutMsec, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bodyReceiveTimeoutMsec: typing.Union[MetaOapg.properties.bodyReceiveTimeoutMsec, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authenticationTimeout: typing.Union[MetaOapg.properties.authenticationTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        quiesceMode: typing.Union[MetaOapg.properties.quiesceMode, bool, schemas.Unset] = schemas.unset,
        monitorInterval: typing.Union[MetaOapg.properties.monitorInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        samlCertRolloverSupported: typing.Union[MetaOapg.properties.samlCertRolloverSupported, bool, schemas.Unset] = schemas.unset,
        httpConnectionTimeout: typing.Union[MetaOapg.properties.httpConnectionTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tlsPortSharingEnabled: typing.Union[MetaOapg.properties.tlsPortSharingEnabled, bool, schemas.Unset] = schemas.unset,
        uagName: typing.Union[MetaOapg.properties.uagName, str, schemas.Unset] = schemas.unset,
        ceipEnabled: typing.Union[MetaOapg.properties.ceipEnabled, bool, schemas.Unset] = schemas.unset,
        adminCertRolledBack: typing.Union[MetaOapg.properties.adminCertRolledBack, bool, schemas.Unset] = schemas.unset,
        clientConnectionIdleTimeout: typing.Union[MetaOapg.properties.clientConnectionIdleTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sshEnabled: typing.Union[MetaOapg.properties.sshEnabled, bool, schemas.Unset] = schemas.unset,
        sshPasswordAccessEnabled: typing.Union[MetaOapg.properties.sshPasswordAccessEnabled, bool, schemas.Unset] = schemas.unset,
        sshKeyAccessEnabled: typing.Union[MetaOapg.properties.sshKeyAccessEnabled, bool, schemas.Unset] = schemas.unset,
        sshInterface: typing.Union[MetaOapg.properties.sshInterface, str, schemas.Unset] = schemas.unset,
        sshPort: typing.Union[MetaOapg.properties.sshPort, str, schemas.Unset] = schemas.unset,
        sshLoginBannerText: typing.Union[MetaOapg.properties.sshLoginBannerText, str, schemas.Unset] = schemas.unset,
        sshPublicKeys: typing.Union[MetaOapg.properties.sshPublicKeys, list, tuple, schemas.Unset] = schemas.unset,
        dns: typing.Union[MetaOapg.properties.dns, str, schemas.Unset] = schemas.unset,
        dnsSearch: typing.Union[MetaOapg.properties.dnsSearch, str, schemas.Unset] = schemas.unset,
        snmpEnabled: typing.Union[MetaOapg.properties.snmpEnabled, bool, schemas.Unset] = schemas.unset,
        snmpSettings: typing.Union['SnmpSettings', schemas.Unset] = schemas.unset,
        hostClockSyncSupported: typing.Union[MetaOapg.properties.hostClockSyncSupported, bool, schemas.Unset] = schemas.unset,
        hostClockSyncEnabled: typing.Union[MetaOapg.properties.hostClockSyncEnabled, bool, schemas.Unset] = schemas.unset,
        ntpServers: typing.Union[MetaOapg.properties.ntpServers, str, schemas.Unset] = schemas.unset,
        fallBackNtpServers: typing.Union[MetaOapg.properties.fallBackNtpServers, str, schemas.Unset] = schemas.unset,
        clockSkewTolerance: typing.Union[MetaOapg.properties.clockSkewTolerance, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxConnectionsAllowedPerSession: typing.Union[MetaOapg.properties.maxConnectionsAllowedPerSession, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxSystemCPUAllowed: typing.Union[MetaOapg.properties.maxSystemCPUAllowed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowedHostHeaderValues: typing.Union[MetaOapg.properties.allowedHostHeaderValues, str, schemas.Unset] = schemas.unset,
        enabledAdvancedFeatures: typing.Union[MetaOapg.properties.enabledAdvancedFeatures, str, schemas.Unset] = schemas.unset,
        secureRandomSource: typing.Union[MetaOapg.properties.secureRandomSource, str, schemas.Unset] = schemas.unset,
        forcedRestart: typing.Union[MetaOapg.properties.forcedRestart, bool, schemas.Unset] = schemas.unset,
        extendedServerCertValidationEnabled: typing.Union[MetaOapg.properties.extendedServerCertValidationEnabled, bool, schemas.Unset] = schemas.unset,
        commandsFirstBoot: typing.Union[MetaOapg.properties.commandsFirstBoot, str, schemas.Unset] = schemas.unset,
        commandsEveryBoot: typing.Union[MetaOapg.properties.commandsEveryBoot, str, schemas.Unset] = schemas.unset,
        dsComplianceOS: typing.Union[MetaOapg.properties.dsComplianceOS, bool, schemas.Unset] = schemas.unset,
        unrecognizedSessionsMonitoringEnabled: typing.Union[MetaOapg.properties.unrecognizedSessionsMonitoringEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemSettings':
        return super().__new__(
            cls,
            *_args,
            coreDumpSettings=coreDumpSettings,
            fipsEnabled=fipsEnabled,
            adminPasswordExpirationDays=adminPasswordExpirationDays,
            adminSessionIdleTimeoutMinutes=adminSessionIdleTimeoutMinutes,
            adminMaxConcurrentSessions=adminMaxConcurrentSessions,
            rootPasswordExpirationDays=rootPasswordExpirationDays,
            rootSessionIdleTimeoutSeconds=rootSessionIdleTimeoutSeconds,
            osLoginUsername=osLoginUsername,
            osMaxLoginLimit=osMaxLoginLimit,
            monitoringUsersPasswordExpirationDays=monitoringUsersPasswordExpirationDays,
            adminPasswordPolicySettings=adminPasswordPolicySettings,
            passwordPolicySettings=passwordPolicySettings,
            cipherSuites=cipherSuites,
            outboundCipherSuites=outboundCipherSuites,
            sslProvider=sslProvider,
            tlsNamedGroups=tlsNamedGroups,
            tlsSignatureSchemes=tlsSignatureSchemes,
            ssl30Enabled=ssl30Enabled,
            tls10Enabled=tls10Enabled,
            tls11Enabled=tls11Enabled,
            tls12Enabled=tls12Enabled,
            tls13Enabled=tls13Enabled,
            adminDisclaimerText=adminDisclaimerText,
            syslogUrl=syslogUrl,
            syslogAuditUrl=syslogAuditUrl,
            sysLogType=sysLogType,
            syslogServerCACertPem=syslogServerCACertPem,
            syslogClientCertCertPem=syslogClientCertCertPem,
            syslogClientCertKeyPem=syslogClientCertKeyPem,
            tlsSyslogServerSettings=tlsSyslogServerSettings,
            healthCheckUrl=healthCheckUrl,
            enableHTTPHealthMonitor=enableHTTPHealthMonitor,
            cookiesToBeCached=cookiesToBeCached,
            ipMode=ipMode,
            ipModeforNIC2=ipModeforNIC2,
            ipModeforNIC3=ipModeforNIC3,
            defaultRedirectHost=defaultRedirectHost,
            sessionTimeout=sessionTimeout,
            requestTimeoutMsec=requestTimeoutMsec,
            bodyReceiveTimeoutMsec=bodyReceiveTimeoutMsec,
            authenticationTimeout=authenticationTimeout,
            quiesceMode=quiesceMode,
            monitorInterval=monitorInterval,
            samlCertRolloverSupported=samlCertRolloverSupported,
            httpConnectionTimeout=httpConnectionTimeout,
            tlsPortSharingEnabled=tlsPortSharingEnabled,
            uagName=uagName,
            ceipEnabled=ceipEnabled,
            adminCertRolledBack=adminCertRolledBack,
            clientConnectionIdleTimeout=clientConnectionIdleTimeout,
            sshEnabled=sshEnabled,
            sshPasswordAccessEnabled=sshPasswordAccessEnabled,
            sshKeyAccessEnabled=sshKeyAccessEnabled,
            sshInterface=sshInterface,
            sshPort=sshPort,
            sshLoginBannerText=sshLoginBannerText,
            sshPublicKeys=sshPublicKeys,
            dns=dns,
            dnsSearch=dnsSearch,
            snmpEnabled=snmpEnabled,
            snmpSettings=snmpSettings,
            hostClockSyncSupported=hostClockSyncSupported,
            hostClockSyncEnabled=hostClockSyncEnabled,
            ntpServers=ntpServers,
            fallBackNtpServers=fallBackNtpServers,
            clockSkewTolerance=clockSkewTolerance,
            maxConnectionsAllowedPerSession=maxConnectionsAllowedPerSession,
            maxSystemCPUAllowed=maxSystemCPUAllowed,
            allowedHostHeaderValues=allowedHostHeaderValues,
            enabledAdvancedFeatures=enabledAdvancedFeatures,
            secureRandomSource=secureRandomSource,
            forcedRestart=forcedRestart,
            extendedServerCertValidationEnabled=extendedServerCertValidationEnabled,
            commandsFirstBoot=commandsFirstBoot,
            commandsEveryBoot=commandsEveryBoot,
            dsComplianceOS=dsComplianceOS,
            unrecognizedSessionsMonitoringEnabled=unrecognizedSessionsMonitoringEnabled,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.core_dump_settings import CoreDumpSettings
from openapi_client.model.password_policy_settings import PasswordPolicySettings
from openapi_client.model.snmp_settings import SnmpSettings
from openapi_client.model.ssh_public_key import SshPublicKey
from openapi_client.model.tls_syslog_server_settings import TlsSyslogServerSettings
