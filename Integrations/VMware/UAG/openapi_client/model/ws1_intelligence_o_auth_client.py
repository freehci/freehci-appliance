# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class WS1IntelligenceOAuthClient(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            client_id = schemas.StrSchema
            client_secret = schemas.StrSchema
            
            
            class scopes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scopes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            access_token_validity_secs = schemas.Int64Schema
            refresh_token_validity_secs = schemas.Int64Schema
            integration = schemas.StrSchema
            source_system_id = schemas.StrSchema
            org_id = schemas.StrSchema
            
            
            class authorized_grant_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorized_grant_types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class resource_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resource_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "client_id": client_id,
                "client_secret": client_secret,
                "scopes": scopes,
                "access_token_validity_secs": access_token_validity_secs,
                "refresh_token_validity_secs": refresh_token_validity_secs,
                "integration": integration,
                "source_system_id": source_system_id,
                "org_id": org_id,
                "authorized_grant_types": authorized_grant_types,
                "resource_ids": resource_ids,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_secret"]) -> MetaOapg.properties.client_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token_validity_secs"]) -> MetaOapg.properties.access_token_validity_secs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_token_validity_secs"]) -> MetaOapg.properties.refresh_token_validity_secs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration"]) -> MetaOapg.properties.integration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_system_id"]) -> MetaOapg.properties.source_system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized_grant_types"]) -> MetaOapg.properties.authorized_grant_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_ids"]) -> MetaOapg.properties.resource_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client_id", "client_secret", "scopes", "access_token_validity_secs", "refresh_token_validity_secs", "integration", "source_system_id", "org_id", "authorized_grant_types", "resource_ids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_secret"]) -> typing.Union[MetaOapg.properties.client_secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union[MetaOapg.properties.scopes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token_validity_secs"]) -> typing.Union[MetaOapg.properties.access_token_validity_secs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_token_validity_secs"]) -> typing.Union[MetaOapg.properties.refresh_token_validity_secs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration"]) -> typing.Union[MetaOapg.properties.integration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_system_id"]) -> typing.Union[MetaOapg.properties.source_system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized_grant_types"]) -> typing.Union[MetaOapg.properties.authorized_grant_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_ids"]) -> typing.Union[MetaOapg.properties.resource_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client_id", "client_secret", "scopes", "access_token_validity_secs", "refresh_token_validity_secs", "integration", "source_system_id", "org_id", "authorized_grant_types", "resource_ids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        client_id: typing.Union[MetaOapg.properties.client_id, str, schemas.Unset] = schemas.unset,
        client_secret: typing.Union[MetaOapg.properties.client_secret, str, schemas.Unset] = schemas.unset,
        scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, schemas.Unset] = schemas.unset,
        access_token_validity_secs: typing.Union[MetaOapg.properties.access_token_validity_secs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refresh_token_validity_secs: typing.Union[MetaOapg.properties.refresh_token_validity_secs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        integration: typing.Union[MetaOapg.properties.integration, str, schemas.Unset] = schemas.unset,
        source_system_id: typing.Union[MetaOapg.properties.source_system_id, str, schemas.Unset] = schemas.unset,
        org_id: typing.Union[MetaOapg.properties.org_id, str, schemas.Unset] = schemas.unset,
        authorized_grant_types: typing.Union[MetaOapg.properties.authorized_grant_types, list, tuple, schemas.Unset] = schemas.unset,
        resource_ids: typing.Union[MetaOapg.properties.resource_ids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WS1IntelligenceOAuthClient':
        return super().__new__(
            cls,
            *_args,
            client_id=client_id,
            client_secret=client_secret,
            scopes=scopes,
            access_token_validity_secs=access_token_validity_secs,
            refresh_token_validity_secs=refresh_token_validity_secs,
            integration=integration,
            source_system_id=source_system_id,
            org_id=org_id,
            authorized_grant_types=authorized_grant_types,
            resource_ids=resource_ids,
            _configuration=_configuration,
            **kwargs,
        )
