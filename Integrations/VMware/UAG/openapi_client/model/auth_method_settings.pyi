# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AuthMethodSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            className = schemas.StrSchema
            displayName = schemas.StrSchema
            jarFile = schemas.StrSchema
            authMethod = schemas.StrSchema
            versionNum = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "className": className,
                "displayName": displayName,
                "jarFile": jarFile,
                "authMethod": authMethod,
                "versionNum": versionNum,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["className"]) -> MetaOapg.properties.className: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jarFile"]) -> MetaOapg.properties.jarFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authMethod"]) -> MetaOapg.properties.authMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionNum"]) -> MetaOapg.properties.versionNum: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "className", "displayName", "jarFile", "authMethod", "versionNum", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["className"]) -> typing.Union[MetaOapg.properties.className, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jarFile"]) -> typing.Union[MetaOapg.properties.jarFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authMethod"]) -> typing.Union[MetaOapg.properties.authMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionNum"]) -> typing.Union[MetaOapg.properties.versionNum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "className", "displayName", "jarFile", "authMethod", "versionNum", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        className: typing.Union[MetaOapg.properties.className, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        jarFile: typing.Union[MetaOapg.properties.jarFile, str, schemas.Unset] = schemas.unset,
        authMethod: typing.Union[MetaOapg.properties.authMethod, str, schemas.Unset] = schemas.unset,
        versionNum: typing.Union[MetaOapg.properties.versionNum, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthMethodSettings':
        return super().__new__(
            cls,
            *_args,
            name=name,
            className=className,
            displayName=displayName,
            jarFile=jarFile,
            authMethod=authMethod,
            versionNum=versionNum,
            _configuration=_configuration,
            **kwargs,
        )
