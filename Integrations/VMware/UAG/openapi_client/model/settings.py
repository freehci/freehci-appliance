# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Settings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def generalSettings() -> typing.Type['GeneralSettings']:
                return GeneralSettings
        
            @staticmethod
            def systemSettings() -> typing.Type['SystemSettings']:
                return SystemSettings
        
            @staticmethod
            def edgeServiceSettingsList() -> typing.Type['EdgeServiceSettingsList']:
                return EdgeServiceSettingsList
        
            @staticmethod
            def authMethodSettingsList() -> typing.Type['AuthMethodSettingsList']:
                return AuthMethodSettingsList
        
            @staticmethod
            def kerberosKeyTabSettingsList() -> typing.Type['KerberosKeyTabSettingsList']:
                return KerberosKeyTabSettingsList
        
            @staticmethod
            def kerberosRealmSettingsList() -> typing.Type['KerberosRealmSettingsList']:
                return KerberosRealmSettingsList
        
            @staticmethod
            def certificateWrapper() -> typing.Type['CertificateChainAndKeyWrapper']:
                return CertificateChainAndKeyWrapper
        
            @staticmethod
            def certificateWrapperAdmin() -> typing.Type['CertificateChainAndKeyWrapper']:
                return CertificateChainAndKeyWrapper
        
            @staticmethod
            def serviceProviderMetadataList() -> typing.Type['SpMediaTypes']:
                return SpMediaTypes
        
            @staticmethod
            def identityProviderMetaData() -> typing.Type['CertificateChainAndKeyWrapper']:
                return CertificateChainAndKeyWrapper
        
            @staticmethod
            def pfxCertStoreWrapper() -> typing.Type['PfxCertStoreWrapper']:
                return PfxCertStoreWrapper
        
            @staticmethod
            def pfxCertStoreWrapperAdmin() -> typing.Type['PfxCertStoreWrapper']:
                return PfxCertStoreWrapper
        
            @staticmethod
            def idpMediaType() -> typing.Type['IdpMediaType']:
                return IdpMediaType
        
            @staticmethod
            def customBrandingSettings() -> typing.Type['CustomBrandingSettings']:
                return CustomBrandingSettings
        
            @staticmethod
            def idPExternalMetadataSettingsList() -> typing.Type['IdPExternalMetadataSettingsList']:
                return IdPExternalMetadataSettingsList
        
            @staticmethod
            def devicePolicySettingsList() -> typing.Type['DevicePolicySettingsList']:
                return DevicePolicySettingsList
        
            @staticmethod
            def loadBalancerSettings() -> typing.Type['LoadBalancerSettings']:
                return LoadBalancerSettings
        
            @staticmethod
            def jwtSettingsList() -> typing.Type['JWTSettingsList']:
                return JWTSettingsList
        
            @staticmethod
            def jwtIssuerSettingsList() -> typing.Type['JWTIssuerSettingsList']:
                return JWTIssuerSettingsList
        
            @staticmethod
            def workspaceOneIntelligenceSettingsList() -> typing.Type['WS1IntelligenceSettingsList']:
                return WS1IntelligenceSettingsList
        
            @staticmethod
            def workspaceOneIntelligenceDataSettings() -> typing.Type['WorkspaceOneIntelligenceDataSettings']:
                return WorkspaceOneIntelligenceDataSettings
        
            @staticmethod
            def outboundProxySettingsList() -> typing.Type['OutboundProxySettingsList']:
                return OutboundProxySettingsList
        
            @staticmethod
            def ocspSigningCertList() -> typing.Type['OCSPSigningCertList']:
                return OCSPSigningCertList
        
            @staticmethod
            def packageUpdatesSettings() -> typing.Type['PackageUpdateSettings']:
                return PackageUpdateSettings
        
            @staticmethod
            def adminUsersList() -> typing.Type['AdminUsersList']:
                return AdminUsersList
        
            @staticmethod
            def customExecutableList() -> typing.Type['CustomExecutableList']:
                return CustomExecutableList
        
            @staticmethod
            def syslogSettings() -> typing.Type['SyslogSettings']:
                return SyslogSettings
        
            @staticmethod
            def adminSAMLSettings() -> typing.Type['AdminSAMLSettings']:
                return AdminSAMLSettings
        
            @staticmethod
            def securityAgentSettingsList() -> typing.Type['SecurityAgentSettingsList']:
                return SecurityAgentSettingsList
            __annotations__ = {
                "generalSettings": generalSettings,
                "systemSettings": systemSettings,
                "edgeServiceSettingsList": edgeServiceSettingsList,
                "authMethodSettingsList": authMethodSettingsList,
                "kerberosKeyTabSettingsList": kerberosKeyTabSettingsList,
                "kerberosRealmSettingsList": kerberosRealmSettingsList,
                "certificateWrapper": certificateWrapper,
                "certificateWrapperAdmin": certificateWrapperAdmin,
                "serviceProviderMetadataList": serviceProviderMetadataList,
                "identityProviderMetaData": identityProviderMetaData,
                "pfxCertStoreWrapper": pfxCertStoreWrapper,
                "pfxCertStoreWrapperAdmin": pfxCertStoreWrapperAdmin,
                "idpMediaType": idpMediaType,
                "customBrandingSettings": customBrandingSettings,
                "idPExternalMetadataSettingsList": idPExternalMetadataSettingsList,
                "devicePolicySettingsList": devicePolicySettingsList,
                "loadBalancerSettings": loadBalancerSettings,
                "jwtSettingsList": jwtSettingsList,
                "jwtIssuerSettingsList": jwtIssuerSettingsList,
                "workspaceOneIntelligenceSettingsList": workspaceOneIntelligenceSettingsList,
                "workspaceOneIntelligenceDataSettings": workspaceOneIntelligenceDataSettings,
                "outboundProxySettingsList": outboundProxySettingsList,
                "ocspSigningCertList": ocspSigningCertList,
                "packageUpdatesSettings": packageUpdatesSettings,
                "adminUsersList": adminUsersList,
                "customExecutableList": customExecutableList,
                "syslogSettings": syslogSettings,
                "adminSAMLSettings": adminSAMLSettings,
                "securityAgentSettingsList": securityAgentSettingsList,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generalSettings"]) -> 'GeneralSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemSettings"]) -> 'SystemSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edgeServiceSettingsList"]) -> 'EdgeServiceSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authMethodSettingsList"]) -> 'AuthMethodSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kerberosKeyTabSettingsList"]) -> 'KerberosKeyTabSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kerberosRealmSettingsList"]) -> 'KerberosRealmSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateWrapper"]) -> 'CertificateChainAndKeyWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificateWrapperAdmin"]) -> 'CertificateChainAndKeyWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceProviderMetadataList"]) -> 'SpMediaTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityProviderMetaData"]) -> 'CertificateChainAndKeyWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pfxCertStoreWrapper"]) -> 'PfxCertStoreWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pfxCertStoreWrapperAdmin"]) -> 'PfxCertStoreWrapper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idpMediaType"]) -> 'IdpMediaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customBrandingSettings"]) -> 'CustomBrandingSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idPExternalMetadataSettingsList"]) -> 'IdPExternalMetadataSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devicePolicySettingsList"]) -> 'DevicePolicySettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadBalancerSettings"]) -> 'LoadBalancerSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jwtSettingsList"]) -> 'JWTSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jwtIssuerSettingsList"]) -> 'JWTIssuerSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceOneIntelligenceSettingsList"]) -> 'WS1IntelligenceSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceOneIntelligenceDataSettings"]) -> 'WorkspaceOneIntelligenceDataSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outboundProxySettingsList"]) -> 'OutboundProxySettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ocspSigningCertList"]) -> 'OCSPSigningCertList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packageUpdatesSettings"]) -> 'PackageUpdateSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminUsersList"]) -> 'AdminUsersList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customExecutableList"]) -> 'CustomExecutableList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syslogSettings"]) -> 'SyslogSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adminSAMLSettings"]) -> 'AdminSAMLSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityAgentSettingsList"]) -> 'SecurityAgentSettingsList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["generalSettings", "systemSettings", "edgeServiceSettingsList", "authMethodSettingsList", "kerberosKeyTabSettingsList", "kerberosRealmSettingsList", "certificateWrapper", "certificateWrapperAdmin", "serviceProviderMetadataList", "identityProviderMetaData", "pfxCertStoreWrapper", "pfxCertStoreWrapperAdmin", "idpMediaType", "customBrandingSettings", "idPExternalMetadataSettingsList", "devicePolicySettingsList", "loadBalancerSettings", "jwtSettingsList", "jwtIssuerSettingsList", "workspaceOneIntelligenceSettingsList", "workspaceOneIntelligenceDataSettings", "outboundProxySettingsList", "ocspSigningCertList", "packageUpdatesSettings", "adminUsersList", "customExecutableList", "syslogSettings", "adminSAMLSettings", "securityAgentSettingsList", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generalSettings"]) -> typing.Union['GeneralSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemSettings"]) -> typing.Union['SystemSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edgeServiceSettingsList"]) -> typing.Union['EdgeServiceSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authMethodSettingsList"]) -> typing.Union['AuthMethodSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kerberosKeyTabSettingsList"]) -> typing.Union['KerberosKeyTabSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kerberosRealmSettingsList"]) -> typing.Union['KerberosRealmSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateWrapper"]) -> typing.Union['CertificateChainAndKeyWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificateWrapperAdmin"]) -> typing.Union['CertificateChainAndKeyWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceProviderMetadataList"]) -> typing.Union['SpMediaTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityProviderMetaData"]) -> typing.Union['CertificateChainAndKeyWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pfxCertStoreWrapper"]) -> typing.Union['PfxCertStoreWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pfxCertStoreWrapperAdmin"]) -> typing.Union['PfxCertStoreWrapper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idpMediaType"]) -> typing.Union['IdpMediaType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customBrandingSettings"]) -> typing.Union['CustomBrandingSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idPExternalMetadataSettingsList"]) -> typing.Union['IdPExternalMetadataSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devicePolicySettingsList"]) -> typing.Union['DevicePolicySettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadBalancerSettings"]) -> typing.Union['LoadBalancerSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jwtSettingsList"]) -> typing.Union['JWTSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jwtIssuerSettingsList"]) -> typing.Union['JWTIssuerSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceOneIntelligenceSettingsList"]) -> typing.Union['WS1IntelligenceSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceOneIntelligenceDataSettings"]) -> typing.Union['WorkspaceOneIntelligenceDataSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outboundProxySettingsList"]) -> typing.Union['OutboundProxySettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ocspSigningCertList"]) -> typing.Union['OCSPSigningCertList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packageUpdatesSettings"]) -> typing.Union['PackageUpdateSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminUsersList"]) -> typing.Union['AdminUsersList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customExecutableList"]) -> typing.Union['CustomExecutableList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syslogSettings"]) -> typing.Union['SyslogSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adminSAMLSettings"]) -> typing.Union['AdminSAMLSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityAgentSettingsList"]) -> typing.Union['SecurityAgentSettingsList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["generalSettings", "systemSettings", "edgeServiceSettingsList", "authMethodSettingsList", "kerberosKeyTabSettingsList", "kerberosRealmSettingsList", "certificateWrapper", "certificateWrapperAdmin", "serviceProviderMetadataList", "identityProviderMetaData", "pfxCertStoreWrapper", "pfxCertStoreWrapperAdmin", "idpMediaType", "customBrandingSettings", "idPExternalMetadataSettingsList", "devicePolicySettingsList", "loadBalancerSettings", "jwtSettingsList", "jwtIssuerSettingsList", "workspaceOneIntelligenceSettingsList", "workspaceOneIntelligenceDataSettings", "outboundProxySettingsList", "ocspSigningCertList", "packageUpdatesSettings", "adminUsersList", "customExecutableList", "syslogSettings", "adminSAMLSettings", "securityAgentSettingsList", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        generalSettings: typing.Union['GeneralSettings', schemas.Unset] = schemas.unset,
        systemSettings: typing.Union['SystemSettings', schemas.Unset] = schemas.unset,
        edgeServiceSettingsList: typing.Union['EdgeServiceSettingsList', schemas.Unset] = schemas.unset,
        authMethodSettingsList: typing.Union['AuthMethodSettingsList', schemas.Unset] = schemas.unset,
        kerberosKeyTabSettingsList: typing.Union['KerberosKeyTabSettingsList', schemas.Unset] = schemas.unset,
        kerberosRealmSettingsList: typing.Union['KerberosRealmSettingsList', schemas.Unset] = schemas.unset,
        certificateWrapper: typing.Union['CertificateChainAndKeyWrapper', schemas.Unset] = schemas.unset,
        certificateWrapperAdmin: typing.Union['CertificateChainAndKeyWrapper', schemas.Unset] = schemas.unset,
        serviceProviderMetadataList: typing.Union['SpMediaTypes', schemas.Unset] = schemas.unset,
        identityProviderMetaData: typing.Union['CertificateChainAndKeyWrapper', schemas.Unset] = schemas.unset,
        pfxCertStoreWrapper: typing.Union['PfxCertStoreWrapper', schemas.Unset] = schemas.unset,
        pfxCertStoreWrapperAdmin: typing.Union['PfxCertStoreWrapper', schemas.Unset] = schemas.unset,
        idpMediaType: typing.Union['IdpMediaType', schemas.Unset] = schemas.unset,
        customBrandingSettings: typing.Union['CustomBrandingSettings', schemas.Unset] = schemas.unset,
        idPExternalMetadataSettingsList: typing.Union['IdPExternalMetadataSettingsList', schemas.Unset] = schemas.unset,
        devicePolicySettingsList: typing.Union['DevicePolicySettingsList', schemas.Unset] = schemas.unset,
        loadBalancerSettings: typing.Union['LoadBalancerSettings', schemas.Unset] = schemas.unset,
        jwtSettingsList: typing.Union['JWTSettingsList', schemas.Unset] = schemas.unset,
        jwtIssuerSettingsList: typing.Union['JWTIssuerSettingsList', schemas.Unset] = schemas.unset,
        workspaceOneIntelligenceSettingsList: typing.Union['WS1IntelligenceSettingsList', schemas.Unset] = schemas.unset,
        workspaceOneIntelligenceDataSettings: typing.Union['WorkspaceOneIntelligenceDataSettings', schemas.Unset] = schemas.unset,
        outboundProxySettingsList: typing.Union['OutboundProxySettingsList', schemas.Unset] = schemas.unset,
        ocspSigningCertList: typing.Union['OCSPSigningCertList', schemas.Unset] = schemas.unset,
        packageUpdatesSettings: typing.Union['PackageUpdateSettings', schemas.Unset] = schemas.unset,
        adminUsersList: typing.Union['AdminUsersList', schemas.Unset] = schemas.unset,
        customExecutableList: typing.Union['CustomExecutableList', schemas.Unset] = schemas.unset,
        syslogSettings: typing.Union['SyslogSettings', schemas.Unset] = schemas.unset,
        adminSAMLSettings: typing.Union['AdminSAMLSettings', schemas.Unset] = schemas.unset,
        securityAgentSettingsList: typing.Union['SecurityAgentSettingsList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Settings':
        return super().__new__(
            cls,
            *_args,
            generalSettings=generalSettings,
            systemSettings=systemSettings,
            edgeServiceSettingsList=edgeServiceSettingsList,
            authMethodSettingsList=authMethodSettingsList,
            kerberosKeyTabSettingsList=kerberosKeyTabSettingsList,
            kerberosRealmSettingsList=kerberosRealmSettingsList,
            certificateWrapper=certificateWrapper,
            certificateWrapperAdmin=certificateWrapperAdmin,
            serviceProviderMetadataList=serviceProviderMetadataList,
            identityProviderMetaData=identityProviderMetaData,
            pfxCertStoreWrapper=pfxCertStoreWrapper,
            pfxCertStoreWrapperAdmin=pfxCertStoreWrapperAdmin,
            idpMediaType=idpMediaType,
            customBrandingSettings=customBrandingSettings,
            idPExternalMetadataSettingsList=idPExternalMetadataSettingsList,
            devicePolicySettingsList=devicePolicySettingsList,
            loadBalancerSettings=loadBalancerSettings,
            jwtSettingsList=jwtSettingsList,
            jwtIssuerSettingsList=jwtIssuerSettingsList,
            workspaceOneIntelligenceSettingsList=workspaceOneIntelligenceSettingsList,
            workspaceOneIntelligenceDataSettings=workspaceOneIntelligenceDataSettings,
            outboundProxySettingsList=outboundProxySettingsList,
            ocspSigningCertList=ocspSigningCertList,
            packageUpdatesSettings=packageUpdatesSettings,
            adminUsersList=adminUsersList,
            customExecutableList=customExecutableList,
            syslogSettings=syslogSettings,
            adminSAMLSettings=adminSAMLSettings,
            securityAgentSettingsList=securityAgentSettingsList,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.admin_saml_settings import AdminSAMLSettings
from openapi_client.model.admin_users_list import AdminUsersList
from openapi_client.model.auth_method_settings_list import AuthMethodSettingsList
from openapi_client.model.certificate_chain_and_key_wrapper import CertificateChainAndKeyWrapper
from openapi_client.model.custom_branding_settings import CustomBrandingSettings
from openapi_client.model.custom_executable_list import CustomExecutableList
from openapi_client.model.device_policy_settings_list import DevicePolicySettingsList
from openapi_client.model.edge_service_settings_list import EdgeServiceSettingsList
from openapi_client.model.general_settings import GeneralSettings
from openapi_client.model.id_p_external_metadata_settings_list import IdPExternalMetadataSettingsList
from openapi_client.model.idp_media_type import IdpMediaType
from openapi_client.model.jwt_issuer_settings_list import JWTIssuerSettingsList
from openapi_client.model.jwt_settings_list import JWTSettingsList
from openapi_client.model.kerberos_key_tab_settings_list import KerberosKeyTabSettingsList
from openapi_client.model.kerberos_realm_settings_list import KerberosRealmSettingsList
from openapi_client.model.load_balancer_settings import LoadBalancerSettings
from openapi_client.model.ocsp_signing_cert_list import OCSPSigningCertList
from openapi_client.model.outbound_proxy_settings_list import OutboundProxySettingsList
from openapi_client.model.package_update_settings import PackageUpdateSettings
from openapi_client.model.pfx_cert_store_wrapper import PfxCertStoreWrapper
from openapi_client.model.security_agent_settings_list import SecurityAgentSettingsList
from openapi_client.model.sp_media_types import SpMediaTypes
from openapi_client.model.syslog_settings import SyslogSettings
from openapi_client.model.system_settings import SystemSettings
from openapi_client.model.workspace_one_intelligence_data_settings import WorkspaceOneIntelligenceDataSettings
from openapi_client.model.ws1_intelligence_settings_list import WS1IntelligenceSettingsList
