# coding: utf-8

"""
    Unified Access Gateway REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OutboundProxySettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proxyUrl",
            "name",
            "includedHosts",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[[\p{L}\p{N}\p{M}_.-]+( [\p{L}\p{N}\p{M}_.-]+)]{1,50}$',  # noqa: E501
                    }]
            proxyUrl = schemas.StrSchema
            
            
            class includedHosts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'includedHosts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class proxyType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HTTP": "HTTP",
                    }
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("HTTP")
            
            
            class trustedCertificates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PublicKeyOrCert']:
                        return PublicKeyOrCert
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PublicKeyOrCert'], typing.List['PublicKeyOrCert']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trustedCertificates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PublicKeyOrCert':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "proxyUrl": proxyUrl,
                "includedHosts": includedHosts,
                "proxyType": proxyType,
                "trustedCertificates": trustedCertificates,
            }
    
    proxyUrl: MetaOapg.properties.proxyUrl
    name: MetaOapg.properties.name
    includedHosts: MetaOapg.properties.includedHosts
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxyUrl"]) -> MetaOapg.properties.proxyUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includedHosts"]) -> MetaOapg.properties.includedHosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxyType"]) -> MetaOapg.properties.proxyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedCertificates"]) -> MetaOapg.properties.trustedCertificates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "proxyUrl", "includedHosts", "proxyType", "trustedCertificates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxyUrl"]) -> MetaOapg.properties.proxyUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includedHosts"]) -> MetaOapg.properties.includedHosts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxyType"]) -> typing.Union[MetaOapg.properties.proxyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedCertificates"]) -> typing.Union[MetaOapg.properties.trustedCertificates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "proxyUrl", "includedHosts", "proxyType", "trustedCertificates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        proxyUrl: typing.Union[MetaOapg.properties.proxyUrl, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        includedHosts: typing.Union[MetaOapg.properties.includedHosts, list, tuple, ],
        proxyType: typing.Union[MetaOapg.properties.proxyType, str, schemas.Unset] = schemas.unset,
        trustedCertificates: typing.Union[MetaOapg.properties.trustedCertificates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OutboundProxySettings':
        return super().__new__(
            cls,
            *_args,
            proxyUrl=proxyUrl,
            name=name,
            includedHosts=includedHosts,
            proxyType=proxyType,
            trustedCertificates=trustedCertificates,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.public_key_or_cert import PublicKeyOrCert
